{"version":3,"sources":["Store/Reducers/initialState.js","Store/Reducers/_reducers.js","Store/Reducers/reducer-events.js","Store/Actions/actionTypes.js","Store/Reducers/selector-event.js","Store/Reducers/single-event.js","Store/Actions/action-events.js","Store/Actions/actionEvents.js","Store/Actions/selectEvents.js","Store/Actions/singleEvent.js","components/type-component/Event.js","components/type-component/Meeting.js","components/type-component/Reminder.js","components/type-component/Tasks.js","components/TypeEvent.js","components/AddEvent.js","components/AllEvents.js","components/EditEvent.js","components/ShowSingleEvent.js","components/ShowEvents.js","components/ColorCounter.js","components/Calender.js","components/RootApp.js","App.js","serviceWorker.js","index.js"],"names":["state","events","addEvent","selectedEvent","singleEvent","allReducer","combineReducers","arguments","length","undefined","InitialState","action","type","payload","Array","isArray","selectEvent","event","JSON","parse","localStorage","getItem","push","setItem","stringify","fetchEvents","getEventByDate","start","end","view","filter","eve","s","Date","getTime","e","uuid4","require","fetchSingleEvent","_events$filter","id","Object","slicedToArray","copySingleEvent","_ref","title","allDay","removeSingleEvent","_ref2","selectEditEvent","updateEditEvent","EventType","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDescription","addComposeType","setState","onClear","_this2","react_default","a","createElement","es5","Item","label","autosize","placeholder","value","onChange","Component","defaultProps","mode","Meeting","meeting","Reminder","reminder","TaskType","tasks","TypeEvent","data","sentData","composedTypeData","composeTypeData","key","objectSpread","showSelectedType","Event","type_component_Meeting","type_component_Reminder","Tasks","eventType","Group","Button","modeWiseEventShow","uuidv4","AddEvent","clear","form","eventTypeCompose","setFormDate","setDateValue","clearToFalse","setTimeout","sentForm","_this$state$form","onSave","Notification","message","Body","className","model","components_TypeEvent","isShowTime","date","_date","Footer","onClick","onCancel","AllEvents","columns","prop","width","render","row","column","index","size","icon","changeViewMode","style","border","height","connect","dispatch","bindActionCreators","EditEvent","moment","format","ShowSingleEvent","startEdit","refresh","getEvent","evento","onEditSave","changeFormat","eventShow","header","lineHeight","float","onCopy","onSuccess","fromNow","eventEdit","components_EditEvent","eventShowOrEdit","ShowEvents","modeEdit","showEventMode","showTabs","activeName","Pane","name","components_AllEvents","components_AddEvent","eventStart","eventEnd","eventOnSave","eventOnCancel","removeSuccessMessage","refreshEvents","showTabOrView","components_ShowSingleEvent","ColorCounter","setEventCount","past","upcoming","forEach","eves","_this$setEventCount","_this$setEventCount2","Row","gutter","Col","span","offset","$","window","Calender","dialogVisible","addNewDialogVisible","eventDialogVisible","singleEventDialogVisible","startDate","String","endDate","fullCalendar","eventso","singleEventRefresh","initCalender","left","center","right","firstDay","timezone","selectable","defaultView","axisFormat","allDaySlot","selectHelper","eventLimit","editable","droppable","select","console","log","openModal","eventClick","singleEventModalOpen","eventRender","element","i","item","css","changeSelectState","_this$state","saveEventByForm","addEventModalClose","addEventModal","visible","lockScroll","eventModal","components_ShowEvents","singleEventCopy","singleEventModal","onClose","singleEventRemoveSuccess","addNewEventModalOpen","_this$props","classes","fabs","color","fab","Add_default","components_ColorCounter","Button_default","variant","withStyles","theme","position","bottom","spacing","unit","withTheme","PersistentDrawer","open","anchor","handleDrawerOpen","handleDrawerClose","handleChangeAnchor","target","_classNames","_classNames2","drawer","Drawer_default","paper","drawerPaper","drawerHeader","IconButton_default","direction","ChevronRight_default","ChevronLeft_default","Divider_default","before","after","root","appFrame","AppBar_default","classNames","appBar","defineProperty","appBarShift","concat","Toolbar_default","disableGutters","aria-label","menuButton","hide","Typography_default","noWrap","content","contentShift","components_Calender","flexGrow","zIndex","overflow","display","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","appBarShift-left","marginLeft","appBarShift-right","marginRight","alignItems","justifyContent","padding","mixins","toolbar","backgroundColor","palette","background","default","content-left","content-right","contentShift-left","contentShift-right","App","RootApp","isLocalhost","Boolean","location","hostname","match","pushNotification","registration","convertedVapidKey","base64String","base64","repeat","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","urlBase64ToUint8Array","pushManager","subscribe","userVisibleOnly","applicationServerKey","then","setInterval","nw","newEvent","map","pre","knock","eventData","seq","ev","tit","toLowerCase","showNotification","update","updateData","catch","err","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","error","i18n","use","locale","store","createStore","Reducers","applyMiddleware","Thunk","ReactDOM","es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ced72297.chunk.js","sourcesContent":["/**\r\n * All Initial State\r\n */\r\nconst state = {\r\n    events: [],\r\n    addEvent: {},\r\n    selectedEvent: [],\r\n    singleEvent: {}\r\n}\r\nexport default state;","import { combineReducers } from 'redux';\r\nimport { eventReducer } from './reducer-events';\r\nimport { allEvent } from './selector-event';\r\nimport { singleEvent } from './single-event';\r\n\r\n/**\r\n * all Reducers \r\n */\r\nconst allReducer = combineReducers({\r\n    events: eventReducer,\r\n    selectedEvent: allEvent,\r\n    singleEvent: singleEvent\r\n});\r\n\r\nexport default allReducer; ","import InitialState from './initialState';\r\nimport { \r\n    ADD_DATA,\r\n    FETCH_DATA,\r\n    SINGLE_EVENT_REMOVE,\r\n    SINGLE_EVENT_COPY,\r\n    SINGLE_EVENT_EDIT_UPDATE\r\n} from '../Actions/actionTypes';\r\n\r\n/**\r\n * set state for specific action type\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst eventReducer = (state = InitialState.events, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            return state;\r\n        case ADD_DATA:\r\n            return action.payload;\r\n        case FETCH_DATA:\r\n            return action.payload;\r\n        case SINGLE_EVENT_REMOVE:\r\n            return action.payload;\r\n        case SINGLE_EVENT_COPY:\r\n            return action.payload;\r\n        case SINGLE_EVENT_EDIT_UPDATE:\r\n            return action.payload[1];\r\n    }\r\n}\r\n\r\nexport {\r\n    eventReducer\r\n};","// All action types\r\n\r\nexport const ADD_DATA = \"ADD_DATA\";\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\nexport const SELECT_DATA = \"SELECT_DATA\";\r\nexport const UPDATE_DATA = \"UPDATE_DATA\";\r\nexport const REMOVE_DATA = \"REMOVE_DATA\";\r\nexport const SELECT_DATE_FETCH = \"SELECT_DATE_FETCH\";\r\nexport const SINGLE_EVENT_FETCH = \"SINGLE_EVENT_FETCH\";\r\nexport const SINGLE_EVENT_COPY = \"SINGLE_EVENT_COPY\";\r\nexport const SINGLE_EVENT_REMOVE = \"SINGLE_EVENT_REMOVE\";\r\nexport const SINGLE_EVENT_EDIT_SELECT = \"SINGLE_EVENT_EDIT_SELECT\";\r\nexport const SINGLE_EVENT_EDIT_UPDATE = \"SINGLE_EVENT_EDIT_UPDATE\";","import { SELECT_DATE_FETCH } from '../Actions/actionTypes';\r\n\r\nimport InitialState from './initialState';\r\n\r\n/**\r\n * set data for specific action type\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst allEvent = (state = InitialState.selectedEvent, action) => {\r\n    switch(action.type) {\r\n        default: \r\n            return state;\r\n        case SELECT_DATE_FETCH:\r\n            return Array.isArray(action.payload) ? action.payload: [action.payload] ;\r\n    }\r\n}\r\n\r\nexport {\r\n    allEvent\r\n};","import InitialState from './initialState';\r\n\r\nimport { \r\n    SINGLE_EVENT_FETCH,\r\n    SINGLE_EVENT_REMOVE,\r\n    SINGLE_EVENT_EDIT_SELECT,\r\n    SINGLE_EVENT_EDIT_UPDATE\r\n} from '../Actions/actionTypes';\r\n\r\n/**\r\n * set state for specific action type\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst singleEvent = (state = InitialState.singleEvent, action) => {\r\n    switch(action.type) {\r\n        default:\r\n            return state;\r\n        case SINGLE_EVENT_FETCH:\r\n            return action.payload;\r\n        case SINGLE_EVENT_REMOVE:\r\n            return state;\r\n        case SINGLE_EVENT_EDIT_SELECT:\r\n            return action.payload;\r\n        case SINGLE_EVENT_EDIT_UPDATE:\r\n            return action.payload[0];\r\n    }\r\n}\r\n\r\nexport {\r\n    singleEvent\r\n}","const selectEvent = (event) => {\r\n    return {\r\n        type: 'EVENT_SELECT',\r\n        payload: event\r\n    }\r\n}\r\n\r\nexport {\r\n    selectEvent\r\n}","import {\r\n    ADD_DATA,\r\n    FETCH_DATA\r\n} from './actionTypes';\r\n\r\n/**\r\n * this method add event\r\n * on LocalStorage\r\n * @param {Object} event\r\n * @return type, payload \r\n */\r\nconst addEvent = (event) => {\r\n    let events = JSON.parse(localStorage.getItem('joom_event')) || [];\r\n    events.push(event);\r\n    localStorage.setItem('joom_event', JSON.stringify(events));\r\n    return {\r\n        type: ADD_DATA,\r\n        payload: events\r\n    }\r\n}\r\n\r\n/**\r\n * this method fetch all events from \r\n * localstorage\r\n * @return type, payload\r\n */\r\nconst fetchEvents = () => {\r\n    const getEvent = JSON.parse(localStorage.getItem('joom_event'));\r\n    return {\r\n        type: FETCH_DATA,\r\n        payload: getEvent\r\n    }\r\n}\r\n\r\nexport { \r\n    addEvent,\r\n    fetchEvents\r\n}","import {\r\n    SELECT_DATE_FETCH\r\n} from './actionTypes';\r\n\r\n/**\r\n * this method fetch data \r\n * by this @param\r\n * @param {*} start \r\n * @param {*} end \r\n * @param {*} view \r\n * \r\n * @return type, payload\r\n */\r\nconst getEventByDate = (start, end, view) => {\r\n    let events = JSON.parse(localStorage.getItem('joom_event')) || [];\r\n    let allEvent = events.filter((eve) => {\r\n        let s = new Date(eve.start).getTime();\r\n        let e = new Date(eve.end).getTime();\r\n        return s >= new Date(start).getTime() && e <= new Date(end).getTime();\r\n    });\r\n\r\n    return {\r\n        type: SELECT_DATE_FETCH,\r\n        payload: allEvent\r\n    }\r\n}\r\n\r\nexport {\r\n    getEventByDate\r\n}","import { \r\n    SINGLE_EVENT_FETCH,\r\n    SINGLE_EVENT_REMOVE,\r\n    SINGLE_EVENT_COPY,\r\n    SINGLE_EVENT_EDIT_SELECT,\r\n    SINGLE_EVENT_EDIT_UPDATE\r\n} from './actionTypes';\r\n\r\nconst uuid4 = require('uuid/v4');\r\n\r\n/**\r\n * Fetch Single Events\r\n * @param {} event \r\n */\r\nconst fetchSingleEvent = (event) => {\r\n    let events = JSON.parse(localStorage.getItem('joom_event'));\r\n    const [ firstEvent ] = events.filter(e => e.id === event.id);\r\n    return {\r\n        type: SINGLE_EVENT_FETCH,\r\n        payload: firstEvent\r\n    }\r\n}\r\n\r\n/**\r\n * Copy event\r\n * @param {} param \r\n */\r\nconst copySingleEvent = ({ id, title, start, end, allDay }) => {\r\n    let events = JSON.parse(localStorage.getItem('joom_event'));\r\n    events.push({\r\n        id: uuid4(), title, start, end, allDay\r\n    })\r\n    localStorage.setItem('joom_event', JSON.stringify(events));\r\n\r\n    return {\r\n        type: SINGLE_EVENT_COPY,\r\n        payload: events\r\n    }\r\n}\r\n\r\n/**\r\n * Remove single event\r\n * @param {} param0 \r\n */\r\nconst removeSingleEvent = ({ id }) => {\r\n    const events = JSON.parse(localStorage.getItem('joom_event')).filter((e) => {\r\n        return e.id !== id;\r\n    });\r\n    localStorage.setItem('joom_event', JSON.stringify(events));\r\n\r\n    return {\r\n        type: SINGLE_EVENT_REMOVE,\r\n        payload: events\r\n    }\r\n}\r\n\r\n/**\r\n * Pass single event edit data\r\n * @param {} event \r\n */\r\nconst selectEditEvent = (event) => {\r\n    return {\r\n        type: SINGLE_EVENT_EDIT_SELECT,\r\n        payload: event\r\n    }\r\n}\r\n\r\n/**\r\n * Update Edit event\r\n * @param event \r\n */\r\nconst updateEditEvent = (event) => {\r\n    let events = JSON.parse(localStorage.getItem('joom_event')).filter(e => e.id !== event.id);\r\n    events.push(event);\r\n    localStorage.setItem('joom_event', JSON.stringify(events));\r\n\r\n    return {\r\n        type: SINGLE_EVENT_EDIT_UPDATE,\r\n        payload: [event, events]\r\n    }\r\n}\r\n\r\n// export methods\r\nexport {\r\n    fetchSingleEvent,\r\n    removeSingleEvent,\r\n    copySingleEvent,\r\n    selectEditEvent,\r\n    updateEditEvent\r\n}","/**-------------------------------\r\n * This Component contain using \r\n * for form event data input\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes  from 'prop-types';\r\nimport { Form, Input} from 'element-react';\r\n\r\nclass EventType extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // when work is done refresh the state\r\n        if (this.props.onClear) {\r\n            this.setState({ event: \"\" })\r\n        }\r\n    }\r\n\r\n    state = {\r\n        event: this.props.event\r\n    }\r\n\r\n    // set description through input event\r\n    setDescription = (e) => {\r\n        this.props.addComposeType('event', e)\r\n        this.setState({ event: e })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Item label=\"Description\">\r\n                    <Input \r\n                        type=\"textarea\"\r\n                        autosize={true}\r\n                        placeholder=\"Description\"\r\n                        value={this.state.event}\r\n                        onChange={(e) => {\r\n                            this.setDescription(e);\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// EventType Proptypes assignd\r\nEventType.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    event: PropTypes.string,\r\n    addComposeType: PropTypes.func,\r\n    onClear: PropTypes.bool\r\n}\r\n\r\n// EventType Default props set here\r\nEventType.defaultProps = {\r\n    mode: \"add\",\r\n    event: \"\"\r\n}\r\n\r\nexport default EventType;","/**-------------------------------\r\n * This Component contain using \r\n * for form Meeting data input\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes  from 'prop-types';\r\nimport { Form, Input} from 'element-react';\r\n\r\nclass Meeting extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // when work is done refresh the state\r\n        if (this.props.onClear) {\r\n            this.setState({ meeting: \"\" })\r\n        }\r\n    }\r\n\r\n    state = {\r\n        meeting: this.props.meeting\r\n    }\r\n\r\n    // set description through input event\r\n    setDescription = (e) => {\r\n        this.props.addComposeType('meeting', e)\r\n        this.setState({ meeting: e })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Item label=\"Meeting with\">\r\n                    <Input \r\n                        placeholder=\"@Hashemi\"\r\n                        value={this.state.meeting}\r\n                        onChange={(e) => {\r\n                            this.setDescription(e);\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Meeting Prop types \r\nMeeting.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    meeting: PropTypes.string,\r\n    addComposeType: PropTypes.func,\r\n    onClear: PropTypes.bool\r\n}\r\n\r\n// Meeting Default Props\r\nMeeting.defaultProps = {\r\n    mode: \"add\",\r\n    meeting: \"\"\r\n}\r\n\r\nexport default Meeting;","/**-------------------------------\r\n * This Component contain using \r\n * for form Reminder data input\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes  from 'prop-types';\r\nimport { Form, Input} from 'element-react';\r\n\r\nclass Reminder extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // when work is done refresh the state\r\n        if (this.props.onClear) {\r\n            this.setState({ reminder: \"\" });\r\n        }\r\n    }\r\n\r\n    state = {\r\n        reminder: this.props.reminder\r\n    }\r\n\r\n    // set description through input event\r\n    setDescription = (e) => {\r\n        this.props.addComposeType('reminder', e)\r\n        this.setState({ reminder: e })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Item label=\"Remind for\">\r\n                    <Input \r\n                        placeholder=\"example: Today Emon's birthday\"\r\n                        value={this.state.reminder}\r\n                        onChange={(e) => {\r\n                            this.setDescription(e);\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Reminder Prop Types\r\nReminder.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    reminder: PropTypes.string,\r\n    addComposeType: PropTypes.func,\r\n    onClear: PropTypes.bool\r\n}\r\n\r\n// Reminder Default Props\r\nReminder.defaultProps = {\r\n    mode: \"add\",\r\n    reminder: \"\"\r\n}\r\n\r\nexport default Reminder;","/**-------------------------------\r\n * This Component contain using \r\n * for form Tasks data input\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes  from 'prop-types';\r\nimport { Form, Input} from 'element-react';\r\n\r\nclass TaskType extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // when work is done refresh the state\r\n        if (this.props.onClear) {\r\n            this.setState({ tasks: \"\" })\r\n        }\r\n    }\r\n\r\n    state = {\r\n        tasks: this.props.tasks\r\n    }\r\n\r\n    // set description through input event\r\n    setDescription = (e) => {\r\n        this.props.addComposeType('tasks', e)\r\n        this.setState({ tasks: e })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Item label=\"Description\">\r\n                    <Input \r\n                        type=\"textarea\"\r\n                        autosize={true}\r\n                        placeholder=\"Description\"\r\n                        value={this.state.tasks}\r\n                        onChange={(e) => {\r\n                            this.setDescription(e);\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Tasks Props types\r\nTaskType.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    tasks: PropTypes.string,\r\n    addComposeType: PropTypes.func,\r\n    onClear: PropTypes.bool\r\n}\r\n\r\n// Task Default Props\r\nTaskType.defaultProps = {\r\n    mode: \"add\",\r\n    tasks: \"\"\r\n}\r\n\r\nexport default TaskType;","/**-------------------------------\r\n * This Component contain using \r\n * for form event data input\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Radio } from 'element-react';\r\nimport EventType from './type-component/Event';\r\nimport MeetingType from './type-component/Meeting';\r\nimport ReminderType from './type-component/Reminder';\r\nimport TaskType from './type-component/Tasks';\r\n\r\n\r\nclass TypeEvent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    state = {\r\n        type: this.props.type,\r\n        data: this.props.data\r\n    }\r\n\r\n    // using for sent type and type data to store in immidiate parent\r\n    sentData = () => {\r\n        this.props.composedTypeData(this.state.type, this.state.data);\r\n    }\r\n\r\n    // Composing data to state by key and value\r\n    composeTypeData = (key, value) => {\r\n        let state = { ...this.state }\r\n        state.data[key] = value;\r\n        this.setState({ state });\r\n        this.sentData();\r\n    }\r\n\r\n    // Logical Rendering for which type and mode is selected\r\n    showSelectedType = () => {\r\n        if (this.state.type === \"Event\" && this.props.mode === \"add\") {\r\n            return (\r\n                <EventType\r\n                    mode={this.props.mode}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        } else if (this.state.type === \"Event\" && this.props.mode === \"edit\") {\r\n            return (\r\n                <EventType\r\n                    mode={this.props.mode}\r\n                    event={this.state.data['event']}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (this.state.type === \"Meeting\" && this.props.mode === \"add\") {\r\n            return(\r\n                <MeetingType\r\n                    mode={this.props.mode}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        } else if (this.state.type === \"Meeting\" && this.props.mode === \"edit\") {\r\n            return(\r\n                <MeetingType\r\n                    mode={this.props.mode}\r\n                    meeting={this.state.data['meeting']}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (this.state.type === \"Reminder\" && this.props.mode === \"add\") {\r\n            return (\r\n                <ReminderType\r\n                    mode={this.props.mode}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        } else if (this.state.type === \"Reminder\" && this.props.mode === \"edit\") {\r\n            return (\r\n                <ReminderType\r\n                    mode={this.props.mode}\r\n                    reminder={this.state.data['reminder']}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            );\r\n        }\r\n\r\n        if (this.state.type === \"Tasks\" && this.props.mode === \"add\") {\r\n            return(\r\n                <TaskType\r\n                    mode={this.props.mode}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            )\r\n        } else if (this.state.type === \"Tasks\" && this.props.mode === \"edit\") {\r\n            return(\r\n                <TaskType\r\n                    mode={this.props.mode}\r\n                    tasks={this.state.data['tasks']}\r\n                    addComposeType={this.composeTypeData}\r\n                    onClear={this.props.onClear}\r\n                />\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    // Radio button for select type and load component\r\n    eventType = () => {\r\n        return (\r\n            <div>\r\n                <Radio.Group \r\n                value={this.state.type} \r\n                onChange={(e) => {\r\n                    this.setState({ type: e })\r\n                    this.sentData();\r\n                }}>\r\n                    <Radio.Button value=\"Event\" label=\"Event\"/>\r\n                    <Radio.Button value=\"Meeting\" label=\"Meeting\"/>\r\n                    <Radio.Button value=\"Reminder\" label=\"Reminder\"/>\r\n                    <Radio.Button value=\"Tasks\" label=\"tasks\"/>\r\n                </Radio.Group>\r\n\r\n                { this.showSelectedType() }\r\n            </div>\r\n        )\r\n    }\r\n    // mode wise event show\r\n    modeWiseEventShow = () => {\r\n        return this.eventType();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                { this.modeWiseEventShow() }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// TypeEvent prop types\r\nTypeEvent.propTypes = {\r\n    mode: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    composedTypeData: PropTypes.func,\r\n    data: PropTypes.object,\r\n    onClear: PropTypes.bool\r\n}\r\n\r\n// TypeEvent default props\r\nTypeEvent.defaultProps = {\r\n    mode: \"add\",\r\n    type: \"Event\",\r\n    data: {},\r\n    onClear: false\r\n}\r\n\r\nexport default TypeEvent;","/**-------------------------------\r\n * This Component using for \r\n * add event\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Form, \r\n    Input, \r\n    Dialog, \r\n    DateRangePicker, \r\n    Button,\r\n    Notification \r\n} from 'element-react';\r\nimport moment from 'moment';\r\nimport TypeEvent from './TypeEvent';\r\n\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nclass AddEvent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        clear: false,\r\n        form: {\r\n            title: \"\",\r\n            start: this.props.start,\r\n            end: this.props.end,\r\n            type: \"\",\r\n            data: null\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // set date in form when props again updated\r\n        this.setFormDate();\r\n    }\r\n\r\n    /** \r\n     * When Different Type of data coming from\r\n     * Child Form '/type-component/' it update\r\n     * the data in state\r\n     */\r\n    eventTypeCompose = (type, data) => {\r\n        let state = { ...this.state };\r\n        state.form.type = type;\r\n        state.form.data = data;\r\n        this.setState({ state });\r\n    }\r\n\r\n    // set date in form when props again updated\r\n    setFormDate = () => {\r\n        const state = { ...this.state };\r\n        state.form.start = this.props.start;\r\n        state.form.end = this.props.end;\r\n        this.setState({ state }); \r\n    }\r\n\r\n    /**\r\n     * Set Date value modified to use\r\n     * DateRangePicker Component \r\n     * Default Value when Component\r\n     * Initiate\r\n     */\r\n    setDateValue = () => {\r\n        return [\r\n            new Date(this.state.form.start),\r\n            new Date(this.state.form.end)\r\n        ]\r\n    }\r\n\r\n    // change data clear \r\n    clearToFalse = () => {\r\n        this.setState({ clear: true });\r\n\r\n\r\n        setTimeout(() => {\r\n            this.setState({ clear: false });\r\n        }, 2000);\r\n    }\r\n\r\n    /**\r\n     * send the data to main\r\n     * Calender Component to\r\n     * Store in that state \r\n     */\r\n    sentForm = () => {\r\n        const { title, start, end, type, data } = this.state.form;\r\n        const id = uuidv4();\r\n        if (! title && !type) {\r\n            // Notify if title and types are empty\r\n            Notification({\r\n                message: 'Title, Types Required!',\r\n                type: 'warning'\r\n            });\r\n        } else {\r\n            // send to parent component\r\n            this.props.onSave(\r\n                id,\r\n                title,\r\n                start,\r\n                end,\r\n                // moment(start).format(\"YYYY-MM-DDThh:mm:ssZ\"),\r\n                // moment(end).format(\"YYYY-MM-DDThh:mm:ssZ\"),\r\n                false,\r\n                type,\r\n                data\r\n            )\r\n            \r\n            // update state\r\n            const state = { ...this.state };\r\n            state.form.title = \"\";\r\n            state.form.data = null;\r\n            state.form.type = \"\";\r\n\r\n            this.setState({ state });\r\n            \r\n            // call clear\r\n            this.clearToFalse();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Dialog.Body>\r\n                    <Form className=\"en-US\" model={this.state.form}>\r\n                        <Form.Item label=\"Title\">\r\n                            <Input \r\n                                value={this.state.form.title}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        let state= { ...this.state }\r\n                                        state.form.title = e;\r\n                                        this.setState({ state })\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Item>\r\n\r\n                        <TypeEvent\r\n                            mode=\"add\"\r\n                            composedTypeData={this.eventTypeCompose}\r\n                            onClear={this.state.clear}\r\n                        />\r\n\r\n                        <Form.Item label=\"Duration\">\r\n                            <DateRangePicker\r\n                                isShowTime={true}\r\n                                value={this.setDateValue()}\r\n                                placeholder=\"Pick a range\"\r\n                                onChange={date=>{\r\n                                    const [ start, end ] = date;\r\n                                    let state= { ...this.state }\r\n                                    state.form.start = start;\r\n                                    state.form.end = end;\r\n                                    this.setState({ state })\r\n                                }}\r\n                            />\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Dialog.Body>\r\n                <Dialog.Footer className=\"dialog-footer\">\r\n\r\n                    <Button onClick={ () => {\r\n                        let state= { ...this.state }\r\n                        state.form.title = \"\";\r\n                        this.setState({ state });\r\n                        this.props.onCancel();\r\n                        this.clearToFalse();\r\n                    } }>Cancel</Button>\r\n\r\n                    <Button \r\n                        type=\"primary\" \r\n                        onClick={ () => {\r\n                            this.sentForm()\r\n                        } }>Confirm</Button>\r\n                </Dialog.Footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// AddEvent Prop Types\r\nAddEvent.propTypes = {\r\n    start: PropTypes.string,\r\n    end: PropTypes.string,\r\n    onSave: PropTypes.func,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default AddEvent;","/**-------------------------------\r\n * This Component contain a table\r\n * to display all the events for \r\n * selected day and go to the full\r\n * details by view button.\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Dialog, Table, Button } from 'element-react';\r\nimport { fetchSingleEvent } from '../Store/Actions/_actions';\r\nclass AllEvents extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    state = {\r\n        columns: [\r\n            {\r\n                label: \"Title\",\r\n                prop: \"title\",\r\n                width: \"150px\"\r\n            },\r\n            {\r\n                label: \"Action\",\r\n                render: (row, column, index)=>{\r\n                    return (\r\n                        <span>\r\n                            <Button \r\n                                type=\"info\" \r\n                                size=\"mini\" \r\n                                icon=\"view\"\r\n                                onClick={() => {\r\n                                    this.props.fetchSingleEvent(row)\r\n                                    this.props.changeViewMode(true);\r\n                                }}\r\n                            >View</Button>\r\n                        </span>\r\n                    )\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Dialog.Body>\r\n                <Table\r\n                    style={{width: '100%'}}\r\n                    columns={this.state.columns}\r\n                    data={this.props.events}\r\n                    border={true}\r\n                    height={250}\r\n                />\r\n                </Dialog.Body>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// AllEvent Prop Types\r\nAllEvents.propTypes = {\r\n    changeViewMode: PropTypes.func\r\n}\r\n\r\n// map selected event to props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        events: state.selectedEvent\r\n    }\r\n}\r\n\r\n// map fetchSingle event to dispath in props\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        fetchSingleEvent\r\n    }, dispatch);\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(AllEvents);","/**-------------------------------\r\n * This Component contain using \r\n * for edit specific event\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from \"moment\";\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Button, Dialog, Input, DateRangePicker } from 'element-react';\r\nimport { \r\n    updateEditEvent\r\n} from '../Store/Actions/_actions';\r\nimport TypeEvent from './TypeEvent';\r\n\r\n\r\nclass EditEvent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props =  props;\r\n    }\r\n\r\n    state = {\r\n        clear: false,\r\n        form: {\r\n            id: this.props.event.id,\r\n            title: this.props.event.title,\r\n            start: this.props.event.start,\r\n            end: this.props.event.end,\r\n            type: this.props.event.type,\r\n            data: this.props.event.data\r\n        }\r\n    }\r\n\r\n    /** \r\n     * When Different Type of data coming from\r\n     * Child Form '/type-component/' it update\r\n     * the data in state\r\n     */\r\n    eventTypeCompose = (type, data) => {\r\n        let state = { ...this.state };\r\n        state.form.type = type;\r\n        state.form.data = data;\r\n        this.setState({ state });\r\n    }\r\n\r\n    // change data clear \r\n    clearToFalse = () => {\r\n        this.setState({ clear: true });\r\n\r\n\r\n        setTimeout(() => {\r\n            this.setState({ clear: false });\r\n        }, 2000);\r\n    }\r\n\r\n    /**\r\n     * send the data to main\r\n     * Calender Component to\r\n     * Store in that state \r\n     */\r\n    sentForm = () => {\r\n        const { id, title, start, end, type, data } = this.state.form;\r\n        if (! title && !type) {\r\n            // Notify if title and types are empty\r\n            Notification({\r\n                message: 'Title, Types Required!',\r\n                type: 'warning'\r\n            });\r\n        } else {\r\n            \r\n            // send to parent component            \r\n            this.props.updateEditEvent({\r\n                id,\r\n                title,\r\n                start: moment(start).format(\"YYYY-MM-DDTHH:mm:ssZ\"),\r\n                end:moment(end).format(\"YYYY-MM-DDTHH:mm:ssZ\"),\r\n                allDay: false,\r\n                type, data\r\n            })\r\n            // back to main view\r\n            this.props.onSave();\r\n\r\n            this.clearToFalse();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Set Date value modified to use\r\n     * DateRangePicker Component \r\n     * Default Value when Component\r\n     * Initiate\r\n     */\r\n    setDateValue = () => {\r\n        return [\r\n            new Date(this.state.form.start),\r\n            new Date(this.state.form.end)\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Dialog.Body>\r\n                    <Form className=\"en-US\" model={this.state.form}>\r\n                        <Form.Item label=\"Title\">\r\n                            <Input \r\n                                value={this.state.form.title}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        let state= { ...this.state }\r\n                                        state.form.title = e;\r\n                                        this.setState({ state })\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Form.Item>\r\n                        \r\n                        <TypeEvent\r\n                            mode=\"edit\"\r\n                            type={this.state.form.type}\r\n                            data={this.state.form.data}\r\n                            composedTypeData={this.eventTypeCompose}\r\n                            onClear={this.state.clear}\r\n                        />\r\n\r\n                        <Form.Item label=\"Duration\">\r\n                            <DateRangePicker\r\n                                isShowTime={true}\r\n                                value={this.setDateValue()}\r\n                                placeholder=\"Pick a range\"\r\n                                format=\"yyyy-MM-dd HH\"\r\n                                onChange={date=>{\r\n                                    const [ start, end ] = date;\r\n                                    let state= { ...this.state }\r\n                                    state.form.start = start;\r\n                                    state.form.end = end;\r\n                                    this.setState({ state })\r\n                                }}\r\n                            />\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Dialog.Body>\r\n                <Dialog.Footer className=\"dialog-footer\">\r\n\r\n                    <Button onClick={ () => {\r\n                        this.props.onCancel();\r\n                    } }>Cancel</Button>\r\n\r\n                    <Button \r\n                        type=\"primary\" \r\n                        onClick={ () => {\r\n                            this.sentForm()\r\n                        } }>Confirm</Button>\r\n                </Dialog.Footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// map store state\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        event: state.singleEvent,\r\n    }\r\n}\r\n\r\n// map store actions\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        updateEditEvent\r\n    }, dispatch);\r\n}\r\n\r\n// EditEvent Prop Types\r\nEditEvent.propTypes = {\r\n    onSave: PropTypes.func,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(EditEvent);","/**-------------------------------\r\n * This Component contain using\r\n * for single events details \r\n * and actions to edit, copy and\r\n * delete\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Card, Button, Dialog, Notification } from 'element-react';\r\nimport { \r\n    selectEditEvent,\r\n    removeSingleEvent, \r\n    copySingleEvent \r\n} from '../Store/Actions/_actions';\r\nimport EditEvent from './EditEvent';\r\nimport moment from 'moment';\r\n\r\nclass ShowSingleEvent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    state = {\r\n        startEdit: this.props.refresh\r\n    }\r\n\r\n    // get event from singleEvent or AllEvent\r\n    getEvent = () => {\r\n        return this.props.event || this.props.evento;\r\n    }\r\n\r\n    // return in view\r\n    onCancel = () => {\r\n        this.setState({ startEdit: false });\r\n    }\r\n\r\n    // when update event to show success notifiction\r\n    onEditSave = () => {\r\n        this.setState({ startEdit: false });\r\n\r\n        Notification({\r\n            message: 'Event Updated!',\r\n            type: 'success'\r\n        });\r\n    }\r\n\r\n    changeFormat = (date) => {\r\n        return moment(date).format('YYYY-MM-DD HH:mm:ss');\r\n    }\r\n\r\n    // Event Show method\r\n    eventShow = (event) => {\r\n        return(\r\n            <Dialog.Body>\r\n                <Card\r\n                    className=\"box-card\"\r\n                    header={\r\n                        <div className=\"clearfix\">\r\n                        <span style={{ \"lineHeight\": \"24px\" }}>\r\n                            { event.title }\r\n                        </span>\r\n                        <span style={{ \"float\": \"right\" }}>\r\n                            <Button \r\n                                type=\"info\" \r\n                                size=\"small\" \r\n                                icon=\"edit\"\r\n                                onClick={() => {\r\n                                    this.props.selectEditEvent(event);\r\n                                    this.setState({ startEdit: true });\r\n                                    // this.props.onStartEdit(true);\r\n                                }}\r\n                            >Edit</Button>\r\n\r\n                            <Button \r\n                                type=\"warning\" \r\n                                size=\"small\" \r\n                                icon=\"document\"\r\n                                onClick={() => {\r\n                                    this.props.copySingleEvent(event);\r\n                                    this.props.onCopy();\r\n                                }}\r\n                            >Copy</Button>\r\n\r\n                            <Button \r\n                                type=\"danger\" \r\n                                size=\"small\" \r\n                                icon=\"delete2\"\r\n                                onClick={() => {\r\n                                    this.props.removeSingleEvent(event);\r\n                                    this.props.onSuccess();\r\n                                }}\r\n                            >Remove</Button>\r\n                        </span>\r\n                        </div>\r\n                    }\r\n                >\r\n                    <div className=\"text item\">\r\n                        Start : { this.changeFormat(event.start) }\r\n                    </div>\r\n\r\n                    <div className=\"text item\">\r\n                        End : { this.changeFormat(event.end) }\r\n                    </div>\r\n\r\n                    <div className=\"text item\">\r\n                        { moment(event.end).fromNow() }\r\n                    </div>\r\n\r\n                </Card>\r\n            </Dialog.Body>\r\n        )\r\n    }\r\n\r\n    // event edit method\r\n    eventEdit = (event) => {\r\n        return(\r\n            <EditEvent\r\n                onSave={this.onEditSave}\r\n                onCancel={this.onCancel}\r\n            />\r\n        )\r\n    }\r\n\r\n    // Logical renderning for showing show or edit component\r\n    eventShowOrEdit = (event) => {\r\n        if (!this.state.startEdit) {\r\n            return this.eventShow(event);\r\n        } else {\r\n            return this.eventEdit(event);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const event = this.getEvent();\r\n        \r\n        return(\r\n            <div>\r\n                { this.eventShowOrEdit(event) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ShowSingleEvent Prop types\r\nShowSingleEvent.propTypes = {\r\n    evento: PropTypes.object,\r\n    onSuccess: PropTypes.func,\r\n    onCopy: PropTypes.func,\r\n    onStartEdit: PropTypes.func,\r\n    refresh: PropTypes.bool\r\n}\r\n\r\n// map store state\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        event: state.singleEvent,\r\n    }\r\n}\r\n\r\n// map store actions\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        selectEditEvent,\r\n        copySingleEvent,\r\n        removeSingleEvent\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(ShowSingleEvent);","/**-------------------------------\r\n * This Component contain using \r\n * for showing all Event and \r\n * adding new data form\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AllEvents from './AllEvents';\r\nimport AddEvent from './AddEvent';\r\nimport { Tabs, Notification, Button } from 'element-react';\r\nimport ShowSingleEvent from './ShowSingleEvent';\r\n\r\nclass ShowEvents extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    state = {\r\n        modeEdit: this.props.showEventMode\r\n    }\r\n\r\n    // Show tabs\r\n    showTabs = () => {\r\n        return (\r\n            <Tabs activeName=\"2\">\r\n                <Tabs.Pane label=\"View Events\" name=\"1\">\r\n                    {/* AllEvent Componet */}\r\n                    <AllEvents\r\n                        changeViewMode={this.changeViewMode}\r\n                    />\r\n                </Tabs.Pane>\r\n                <Tabs.Pane label=\"Add Events\" name=\"2\">\r\n                    {/* AddEvent Component */}\r\n                    <AddEvent\r\n                        start={this.props.eventStart}\r\n                        end={this.props.eventEnd}\r\n                        onSave={this.props.eventOnSave}\r\n                        onCancel={this.props.eventOnCancel}\r\n                    />\r\n                </Tabs.Pane>\r\n            </Tabs>\r\n\r\n        )\r\n    }\r\n\r\n    // Change View Mode\r\n    changeViewMode = (mode) => {\r\n        this.setState({ modeEdit: mode });\r\n    }\r\n\r\n    // Refresh events when update and notify\r\n    removeSuccessMessage = () => {\r\n        this.props.refreshEvents();\r\n        this.changeViewMode(false)\r\n        Notification({\r\n            message: 'Event Removed!',\r\n            type: 'success'\r\n        });\r\n\r\n    }\r\n\r\n    // Logical Rendering\r\n    showTabOrView = () => {\r\n        if (!this.state.modeEdit) {\r\n            return this.showTabs();\r\n        } else {\r\n            return(\r\n                <div>\r\n                    <Button icon=\"arrow-left\" type=\"primary\" size=\"mini\" onClick={() => {\r\n                        this.setState({ modeEdit: false })\r\n                    }}>Back</Button>\r\n                    <ShowSingleEvent\r\n                        onSuccess={this.removeSuccessMessage}\r\n                        onCopy={this.props.onCopy}\r\n                        refresh={this.props.showEventMode}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                { this.showTabOrView() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ShowEvents prop types \r\nShowEvents.propTypes = {\r\n    eventStart: PropTypes.string,\r\n    eventEnd: PropTypes.string,\r\n    eventOnSave: PropTypes.func,\r\n    eventOnCancel: PropTypes.func,\r\n    refreshEvents: PropTypes.func,\r\n    showEventMode: PropTypes.bool\r\n}\r\n\r\nexport default ShowEvents;","/**-------------------------------\r\n * This Component\r\n * showing the event data\r\n * by color code and counting \r\n * how much event are stored \r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types' ;\r\nimport { Layout } from 'element-react';\r\n\r\nclass ColorCounter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n    }\r\n\r\n    /**\r\n     * setEventCount\r\n     * this method count \r\n     * the past and upcoming \r\n     * event from props\r\n     */\r\n    setEventCount = () => {\r\n        const { event } = this.props;\r\n        let past = 0, upcoming = 0;\r\n        if (event) {\r\n            event.forEach((eves) => {\r\n                if (new Date(eves.end).getTime() < new Date().getTime()) {\r\n                    past++;\r\n                } else {\r\n                    upcoming++;\r\n                }\r\n            })\r\n        }\r\n\r\n        return [past, upcoming];\r\n    }\r\n\r\n    render() {\r\n        const [past, upcoming] = this.setEventCount();\r\n        return (\r\n            <div>\r\n                <Layout.Row gutter=\"20\">\r\n                    <Layout.Col span=\"1\" offset=\"17\">\r\n                        <div className=\"past\">\r\n                            <span>{ past }</span>\r\n                        </div>\r\n                    </Layout.Col>\r\n                    <Layout.Col span=\"1\">\r\n                        <div className=\"upcoming\">\r\n                            <span>{ upcoming }</span>\r\n                        </div>\r\n                    </Layout.Col>\r\n                </Layout.Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// ColorCounter Prop Types\r\nColorCounter.propTypes = {\r\n    event: PropTypes.any\r\n}\r\n\r\n// ColorCounter Default Props\r\nColorCounter.defaultProps = {\r\n    event: []\r\n}\r\n\r\nexport default ColorCounter;","/**-------------------------------\r\n * This Component contain the main\r\n * calender layout and Calender \r\n * layout actually provided by \r\n * FullCalender.io. This component\r\n * is main parent component for \r\n * calender module.\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport './css/calender.css';\r\nimport { Dialog, Notification } from 'element-react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FabButton from '@material-ui/core/Button'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { selectEvent } from '../Store/Actions/action-events';\r\nimport { \r\n    fetchEvents, \r\n    addEvent, \r\n    getEventByDate,\r\n    fetchSingleEvent\r\n} from '../Store/Actions/_actions';\r\nimport AddEvent from './AddEvent';\r\nimport moment from 'moment';\r\nimport ShowEvents from './ShowEvents';\r\nimport ShowSingleEvent from './ShowSingleEvent';\r\nimport ColorCounter from './ColorCounter';\r\n\r\nconst $ = window.$;\r\nconst timezone = \"+0600\";\r\nconst styles = theme => ({\r\n    fab: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing.unit * 2,\r\n      right: theme.spacing.unit * 2,\r\n    }\r\n});\r\n\r\nclass Calender extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Fetch Events from localStorage\r\n        this.props.fetchEvents();\r\n    }\r\n\r\n    state = {\r\n        dialogVisible: false,\r\n        addNewDialogVisible: false,\r\n        eventDialogVisible: false,\r\n        singleEventDialogVisible: false,\r\n        startDate: String(new Date()),\r\n        endDate: String(new Date()),\r\n        start: null,\r\n        end: null,\r\n        view: $('#calender').fullCalendar('getView').name,\r\n        eventso: this.props.events,\r\n        singleEventRefresh: false,\r\n        showEventMode: false\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.props = props;\r\n        // Update calender UI when Store change something\r\n        $(\"#calender\").fullCalendar('removeEvents'); \r\n        // Set Event store source when data updated\r\n        $(\"#calender\").fullCalendar('addEventSource', this.props.events);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Initial Calender UI\r\n     * If this.props.events has\r\n     * event data\r\n     */\r\n    initCalender = () => {\r\n        const { events } = this.props;\r\n        if (events) {\r\n            // Initial Full Calender\r\n            $('#calender').fullCalendar({\r\n                header: {\r\n                    left: 'title',\r\n                    center: 'agendaDay,agendaWeek,month',\r\n                    right: 'prev,next today'\r\n                },\r\n                firstDay: 1,\r\n                timezone: 'local',\r\n                selectable: true,\r\n                defaultView: 'month',\r\n                axisFormat: 'h:mm',\r\n                allDaySlot: false,\r\n                selectHelper: true,\r\n                eventLimit: true,\r\n                editable: true,\r\n                droppable: false, // this allows things to be dropped onto the calendar\r\n                select: (start, end, allDay) => {\r\n                    console.log(start, end)\r\n                    // Which view type is assigned [day, week, month]\r\n                    let view = $('#calender').fullCalendar('getView');  \r\n                    // Open Modal When each date selected      \r\n                    this.openModal(start, end ,view.name);\r\n                },\r\n                eventClick: (event) => {\r\n                    // Fetch each single event when it click\r\n                    this.props.fetchSingleEvent(event);\r\n                    // Open single event model\r\n                    this.singleEventModalOpen();\r\n                },\r\n                eventRender: (event, element) => {\r\n                    // Showing event past or present by color code ['red', 'green];\r\n                    const eves = JSON.parse(localStorage.getItem('joom_event')).filter((i) => i.id === event.id);\r\n                    if (eves.length) {\r\n                        const [ item ] = eves;\r\n                        if (new Date(item.end).getTime() > new Date().getTime()) {\r\n                            element.css('background-color', '#13ce66');\r\n                        } else {\r\n                            element.css('background-color', '#ff6d6d');\r\n                        }\r\n                    }\r\n                    \r\n                },\r\n                // Events data source\r\n                events\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change Select state for\r\n     * get Data by starting and \r\n     * ending date and view wise\r\n     */\r\n    changeSelectState = () => {\r\n        const { start, end, view } = this.state;\r\n        // Fetch event by start date, end date and view name\r\n        this.props.getEventByDate(start, end, view);\r\n    }\r\n\r\n    /**\r\n     * Open Modal\r\n     * this method working for \r\n     * set some state and\r\n     * get data by start and end date and view name\r\n     */\r\n    openModal = (start, end, view) => {\r\n        console.log(start, end, \"start\")\r\n        this.setState({ \r\n            dialogVisible: true,\r\n            start,\r\n            end,\r\n            view,\r\n            startDate: String(moment(start)),\r\n            endDate: String(moment(end)) \r\n        })\r\n\r\n        // Fetch event by start date, end date and view name        \r\n        this.props.getEventByDate(start, end, view);\r\n    }\r\n\r\n    /**\r\n     * saveEventByForm\r\n     * this method Working for\r\n     * add Event by specific data\r\n     * close Add event modal\r\n     * and show notification when \r\n     * event added\r\n     */\r\n    saveEventByForm = (id, title, start, end, allDay, type, data) => {\r\n        // Add Event \r\n        this.props.addEvent({\r\n            id,\r\n            title,\r\n            start,\r\n            end,\r\n            allDay,\r\n            type,\r\n            data\r\n        })\r\n        \r\n        // Add Event modal close\r\n        this.addEventModalClose();\r\n\r\n        // Showing notification when event added\r\n        Notification({\r\n            message: 'Event Added!',\r\n            type: 'success'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * addEventModalClose\r\n     * this method working for\r\n     * close Add Event modal close\r\n     */\r\n    addEventModalClose = () => {\r\n        this.setState({ addNewDialogVisible: false });\r\n    }\r\n\r\n    /**\r\n     * addEventModal\r\n     * this method working for\r\n     * Showing a modal/Dialog\r\n     * Contain AddEvent Component\r\n     * For Adding Event\r\n     */\r\n    addEventModal = () => {\r\n        return (\r\n            <Dialog\r\n                title=\"Add Event\"\r\n                size=\"tiny\"\r\n                visible={ this.state.addNewDialogVisible }\r\n                onCancel={ () => this.setState({ addNewDialogVisible: false }) }\r\n                lockScroll={ false }\r\n            >   \r\n                {/* Add Event Component */}\r\n                <AddEvent\r\n                    start={this.state.startDate}\r\n                    end={this.state.endDate}\r\n                    onSave={this.saveEventByForm}\r\n                    onCancel={this.addEventModalClose}\r\n                />\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * eventModal\r\n     * This method working for\r\n     * showing a modal/dialog\r\n     * contain Show event component\r\n     * to show all event and \r\n     * add event component for \r\n     * specific date\r\n     */\r\n    eventModal = () => {\r\n        return (\r\n            <Dialog\r\n                title=\"All Events\"\r\n                size=\"tiny\"\r\n                visible={ this.state.dialogVisible }\r\n                onCancel={ () => {this.setState({ dialogVisible: false, showEventMode:  false })} }\r\n                lockScroll={ false }\r\n            >\r\n                {/* ShowEvent Component  */}\r\n                <ShowEvents\r\n                    eventStart={this.state.startDate}\r\n                    eventEnd={this.state.endDate}\r\n                    eventOnSave={this.saveEventByForm}\r\n                    eventOnCancel={() => this.setState({ dialogVisible: false })}\r\n                    onCopy={this.singleEventCopy}\r\n                    refreshEvents={this.changeSelectState}\r\n                    showEventMode={this.state.showEventMode}\r\n                />\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * singleEventModal\r\n     * This method working for\r\n     * showing a modal/dialog\r\n     * contain ShowSingle component\r\n     * to show specific event \r\n     */\r\n    singleEventModal = () => {\r\n        return (\r\n            <Dialog\r\n                title=\"Single Event\"\r\n                size=\"tiny\"\r\n                visible={ this.state.singleEventDialogVisible }\r\n                onClose={() => this.setState({ singleEventDialogVisible: false, singleEventRefresh: false })}\r\n                onCancel={ () => {\r\n                    this.setState({ singleEventDialogVisible: false, singleEventRefresh: false })\r\n                } }\r\n                lockScroll={ false }\r\n            >  \r\n                {/* ShowSingleEvent Component */}\r\n                <ShowSingleEvent\r\n                    onSuccess={this.singleEventRemoveSuccess}\r\n                    onCopy={this.singleEventCopy}\r\n                    onCancel={() => this.setState({ singleEventDialogVisible: false })}\r\n                    refresh={this.state.singleEventRefresh}\r\n                />\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // SingleEvent Modal Open\r\n    singleEventModalOpen = () => {\r\n        this.setState({ singleEventDialogVisible: true })\r\n    }\r\n\r\n    /**\r\n     * singleEventRemoveSuccess\r\n     * this method only working when \r\n     * Some event removed and need \r\n     * to show notification and close\r\n     * the singleEvent Modal\r\n     */\r\n    singleEventRemoveSuccess = () => {  \r\n        this.changeSelectState();\r\n\r\n        this.setState({ singleEventDialogVisible: false });\r\n\r\n        Notification({\r\n            message: 'Event Removed!',\r\n            type: 'success'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * singleEventCopy\r\n     * this method only working when \r\n     * Some event copied and need \r\n     * to show notification\r\n     */\r\n    singleEventCopy = () => {\r\n        this.changeSelectState();\r\n\r\n        Notification({\r\n            message: 'Event Copied!',\r\n            type: 'success'\r\n        });\r\n    }\r\n\r\n    // Open AddNewEvent Modal\r\n    addNewEventModalOpen = () => {\r\n        this.setState( { \r\n            addNewDialogVisible: true,\r\n        } );\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Init Calender UI when Compoenent Mounted\r\n        this.initCalender();\r\n    }\r\n\r\n    render() {\r\n        const { classes, events } = this.props;\r\n        const fabs = {\r\n            color: 'primary',\r\n            className: classes.fab,\r\n            icon: <AddIcon />,\r\n        };\r\n        return(\r\n            <div>\r\n                <ColorCounter\r\n                    event={events}\r\n                />\r\n                <div id=\"calender\"></div>\r\n                \r\n            { this.eventModal() }\r\n            { this.addEventModal() }\r\n            { this.singleEventModal() }\r\n\r\n            <FabButton\r\n                onClick={ () => ( this.addNewEventModalOpen() ) }\r\n                variant=\"fab\" className={fabs.className} color={fabs.color}>\r\n                {fabs.icon}\r\n            </FabButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// map store state\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        events: state.events,\r\n    }\r\n}\r\n\r\n// map store actions\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        selectEvent,\r\n        fetchEvents,\r\n        addEvent,\r\n        getEventByDate,\r\n        fetchSingleEvent\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(withStyles(styles, { withTheme: true })(Calender));","/**------------------------------\r\n * This Component contain the main\r\n * layout and Calender Component \r\n * to display event on there.\r\n---------------------------------*/\r\n\r\nimport React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Calender from './Calender';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appFrame: {\r\n    height: '100vh',\r\n    zIndex: 1,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    width: '100%',\r\n  },\r\n  appBar: {\r\n    position: 'absolute',\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  'appBarShift-left': {\r\n    marginLeft: drawerWidth,\r\n  },\r\n  'appBarShift-right': {\r\n    marginRight: drawerWidth,\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 20,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing.unit * 3,\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  'content-left': {\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  'content-right': {\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  'contentShift-left': {\r\n    marginLeft: 0,\r\n  },\r\n  'contentShift-right': {\r\n    marginRight: 0,\r\n  },\r\n});\r\n\r\nclass PersistentDrawer extends Component {\r\n    state = {\r\n      open: false,\r\n      anchor: 'left',\r\n    };\r\n\r\n    handleDrawerOpen = () => {\r\n      this.setState({ open: true });\r\n    };\r\n\r\n    handleDrawerClose = () => {\r\n      this.setState({ open: false });\r\n    };\r\n\r\n    handleChangeAnchor = event => {\r\n      this.setState({\r\n        anchor: event.target.value,\r\n      });\r\n    };\r\n\r\n    render() {\r\n      const { classes, theme } = this.props;\r\n      const { anchor, open } = this.state;\r\n\r\n      const drawer = (\r\n        <Drawer\r\n          variant=\"persistent\"\r\n          anchor={anchor}\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          {/* <List>{mailFolderListItems}</List> */}\r\n          <Divider />\r\n          {/* <List>{otherMailFolderListItems}</List> */}\r\n        </Drawer>\r\n      );\r\n\r\n      let before = null;\r\n      let after = null;\r\n\r\n      if (anchor === 'left') {\r\n        before = drawer;\r\n      } else {\r\n        after = drawer;\r\n      }\r\n\r\n      return (\r\n        <div className={classes.root}>\r\n          <div className={classes.appFrame}>\r\n            <AppBar\r\n              className={classNames(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n                [classes[`appBarShift-${anchor}`]]: open,\r\n              })}\r\n            >\r\n              <Toolbar disableGutters={!open}>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"Open drawer\"\r\n                  onClick={this.handleDrawerOpen}\r\n                  className={classNames(classes.menuButton, open && classes.hide)}\r\n                >\r\n                  {/* <MenuIcon /> */}\r\n                </IconButton>\r\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                  Event Calendo\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n            {before}\r\n            <main\r\n              className={classNames(classes.content, classes[`content-${anchor}`], {\r\n                [classes.contentShift]: open,\r\n                [classes[`contentShift-${anchor}`]]: open,\r\n              })}\r\n            >\r\n              <div className={classes.drawerHeader}>\r\n              </div>\r\n              {/* Calender Component */}\r\n              <Calender/>\r\n              \r\n            </main>\r\n            {after}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(PersistentDrawer);","/**\r\n * App\r\n */\r\nimport React, { Component } from 'react';\r\nimport RootApp from './components/RootApp';\r\nimport 'element-theme-default';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* RootApp for calender module */}\r\n        <RootApp/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\r\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\r\n\r\n  const rawData = window.atob(base64)\r\n  const outputArray = new Uint8Array(rawData.length)\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i)\r\n  }\r\n  return outputArray\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          if (!registration.pushManager) {\r\n            return;\r\n          }\r\n          // pushNotification(registration);\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction updateData(id ,key, update) {\r\n  let events = JSON.parse(localStorage.getItem('joom_event')) || [];\r\n  let newEvent = [];\r\n  events.map((i) => {\r\n    if (i.id === id) {\r\n      i[key] = update;\r\n    }\r\n    newEvent.push(i);\r\n  })\r\n  localStorage.setItem('joom_event', JSON.stringify(newEvent));\r\n}\r\n\r\nfunction eventData() {\r\n  let events = JSON.parse(localStorage.getItem('joom_event')) || [];\r\n  let newEvent = []\r\n  events.map(i => {\r\n    if ('pre' in i && 'knock' in i) {\r\n      newEvent.push(i)\r\n    } else {\r\n      i.pre = false;\r\n      i.knock = false;\r\n      newEvent.push(i)\r\n    }\r\n  })\r\n  localStorage.setItem('joom_event', JSON.stringify(newEvent));\r\n  return newEvent;\r\n}\r\n\r\n\r\nfunction pushNotification(registration) {\r\n  const vapidPublicKey = \"BDQZUzEODaPotGd2ptDnVUdJ4IWIvV5T4UFf-TM9OlGXgKxhoCPfrkENw1vkSuiIh_bsds5Hy2HQhjIAybVnfaU\"\r\n  const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)\r\n  registration.pushManager\r\n  .subscribe({\r\n    userVisibleOnly: true,\r\n    applicationServerKey: convertedVapidKey\r\n  })\r\n  .then(subscribe => {\r\n    \r\n    setInterval(() => {\r\n      let data = eventData();\r\n\r\n      let nw = data.filter(i => {\r\n        return new Date(i.end).getTime() === new Date().getTime() && !i.pre;\r\n      })\r\n      let seq = 0;\r\n      nw.forEach(ev => {\r\n        let{ title, type, data } = ev;\r\n        let tit = `${title} ${data[type.toLowerCase()]}`;\r\n        seq += 5000;\r\n        setTimeout(() => {\r\n          registration.showNotification(tit);\r\n          updateData(ev, 'pre', true);\r\n        }, seq)\r\n      })\r\n    }, 10000);\r\n  })\r\n  .catch(err => console.log(err))\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      pushNotification(registration);\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport Reducers from './Store/Reducers/_reducers';\r\nimport Thunk from 'redux-thunk';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { i18n } from 'element-react'\r\nimport locale from 'element-react/src/locale/lang/en'\r\nimport './index.css';\r\n\r\ni18n.use(locale);\r\n\r\nconst store = createStore(\r\n    Reducers,\r\n    applyMiddleware(Thunk)\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
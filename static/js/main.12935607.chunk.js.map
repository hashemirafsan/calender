{"version":3,"sources":["Store/Reducers/initialState.js","Store/Reducers/_reducers.js","Store/Reducers/reducer-events.js","Store/Actions/actionTypes.js","Store/Reducers/selector-event.js","Store/Reducers/single-event.js","Store/Actions/action-events.js","Store/Actions/actionEvents.js","Store/Actions/selectEvents.js","Helpers/date.js","Store/Actions/singleEvent.js","components/type-component/Event.js","components/type-component/Meeting.js","components/type-component/Reminder.js","components/type-component/Tasks.js","components/TypeEvent.js","components/AddEvent.js","components/AllEvents.js","components/EditEvent.js","components/ShowSingleEvent.js","components/ShowEvents.js","components/ColorCounter.js","components/Calender.js","components/RootApp.js","App.js","serviceWorker.js","index.js"],"names":["state","events","addEvent","selectedEvent","singleEvent","allReducer","combineReducers","arguments","length","undefined","InitialState","action","type","payload","Array","isArray","selectEvent","event","JSON","parse","localStorage","getItem","push","setItem","stringify","fetchEvents","getEventByDate","start","end","view","_ref","setStart","moment","format","setEnd","subtract","concat","unix","monthDateRange","Date","getTime","dateRange","_ref2","Object","slicedToArray","limitStart","limitEnd","filter","eve","s","e","console","log","uuid4","require","fetchSingleEvent","_events$filter","id","copySingleEvent","title","allDay","removeSingleEvent","selectEditEvent","updateEditEvent","EventType","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDescription","addComposeType","setState","onClear","_this2","react_default","a","createElement","es5","Item","label","autosize","placeholder","value","onChange","Component","defaultProps","mode","Meeting","meeting","Reminder","reminder","TaskType","tasks","TypeEvent","data","sentData","composedTypeData","composeTypeData","key","objectSpread","showSelectedType","Event","type_component_Meeting","type_component_Reminder","Tasks","eventType","Group","Button","modeWiseEventShow","uuidv4","AddEvent","clear","form","eventTypeCompose","setFormDate","setDateValue","clearToFalse","setTimeout","sentForm","_this$state$form","onSave","Notification","message","Body","className","model","components_TypeEvent","isShowTime","date","_date","Footer","onClick","onCancel","AllEvents","columns","prop","width","render","row","column","index","size","icon","changeViewMode","style","border","height","connect","dispatch","bindActionCreators","EditEvent","ShowSingleEvent","startEdit","refresh","getEvent","evento","onEditSave","eventShow","header","lineHeight","float","onCopy","onSuccess","eventEdit","components_EditEvent","eventShowOrEdit","ShowEvents","modeEdit","showEventMode","showTabs","activeName","Pane","name","components_AllEvents","components_AddEvent","eventStart","eventEnd","eventOnSave","eventOnCancel","removeSuccessMessage","refreshEvents","showTabOrView","components_ShowSingleEvent","ColorCounter","setEventCount","past","upcoming","forEach","eves","_this$setEventCount","_this$setEventCount2","Row","gutter","Col","span","offset","$","window","timezone","Calender","dialogVisible","addNewDialogVisible","eventDialogVisible","singleEventDialogVisible","startDate","String","endDate","fullCalendar","eventso","singleEventRefresh","initCalender","left","center","right","firstDay","selectable","defaultView","axisFormat","allDaySlot","selectHelper","eventLimit","editable","droppable","select","openModal","eventClick","singleEventModalOpen","eventRender","element","i","item","css","changeSelectState","_this$state","zone","saveEventByForm","addEventModalClose","addEventModal","visible","lockScroll","eventModal","components_ShowEvents","singleEventCopy","singleEventModal","onClose","singleEventRemoveSuccess","addNewEventModalOpen","_this$props","classes","fabs","color","fab","Add_default","components_ColorCounter","Button_default","variant","withStyles","theme","position","bottom","spacing","unit","withTheme","PersistentDrawer","open","anchor","handleDrawerOpen","handleDrawerClose","handleChangeAnchor","target","_classNames","_classNames2","drawer","Drawer_default","paper","drawerPaper","drawerHeader","IconButton_default","direction","ChevronRight_default","ChevronLeft_default","Divider_default","before","after","root","appFrame","AppBar_default","classNames","appBar","defineProperty","appBarShift","Toolbar_default","disableGutters","aria-label","menuButton","hide","Typography_default","noWrap","content","contentShift","components_Calender","flexGrow","zIndex","overflow","display","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","appBarShift-left","marginLeft","appBarShift-right","marginRight","alignItems","justifyContent","padding","mixins","toolbar","backgroundColor","palette","background","default","content-left","content-right","contentShift-left","contentShift-right","App","RootApp","isLocalhost","Boolean","location","hostname","match","pushNotification","registration","convertedVapidKey","base64String","base64","repeat","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","urlBase64ToUint8Array","pushManager","subscribe","userVisibleOnly","applicationServerKey","then","setInterval","nw","newEvent","map","pre","knock","eventData","seq","ev","tit","toLowerCase","showNotification","update","updateData","catch","err","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","error","i18n","use","locale","store","createStore","Reducers","applyMiddleware","Thunk","ReactDOM","es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12935607.chunk.js","sourcesContent":["/**\n * All Initial State\n */\nconst state = {\n    events: [],\n    addEvent: {},\n    selectedEvent: [],\n    singleEvent: {}\n}\nexport default state;","import { combineReducers } from 'redux';\nimport { eventReducer } from './reducer-events';\nimport { allEvent } from './selector-event';\nimport { singleEvent } from './single-event';\n\n/**\n * all Reducers \n */\nconst allReducer = combineReducers({\n    events: eventReducer,\n    selectedEvent: allEvent,\n    singleEvent: singleEvent\n});\n\nexport default allReducer; ","import InitialState from './initialState';\nimport { \n    ADD_DATA,\n    FETCH_DATA,\n    SINGLE_EVENT_REMOVE,\n    SINGLE_EVENT_COPY,\n    SINGLE_EVENT_EDIT_UPDATE\n} from '../Actions/actionTypes';\n\n/**\n * set state for specific action type\n * @param {*} state \n * @param {*} action \n */\nconst eventReducer = (state = InitialState.events, action) => {\n    switch(action.type) {\n        default:\n            return state;\n        case ADD_DATA:\n            return action.payload;\n        case FETCH_DATA:\n            return action.payload;\n        case SINGLE_EVENT_REMOVE:\n            return action.payload;\n        case SINGLE_EVENT_COPY:\n            return action.payload;\n        case SINGLE_EVENT_EDIT_UPDATE:\n            return action.payload[1];\n    }\n}\n\nexport {\n    eventReducer\n};","// All action types\n\nexport const ADD_DATA = \"ADD_DATA\";\nexport const FETCH_DATA = \"FETCH_DATA\";\nexport const SELECT_DATA = \"SELECT_DATA\";\nexport const UPDATE_DATA = \"UPDATE_DATA\";\nexport const REMOVE_DATA = \"REMOVE_DATA\";\nexport const SELECT_DATE_FETCH = \"SELECT_DATE_FETCH\";\nexport const SINGLE_EVENT_FETCH = \"SINGLE_EVENT_FETCH\";\nexport const SINGLE_EVENT_COPY = \"SINGLE_EVENT_COPY\";\nexport const SINGLE_EVENT_REMOVE = \"SINGLE_EVENT_REMOVE\";\nexport const SINGLE_EVENT_EDIT_SELECT = \"SINGLE_EVENT_EDIT_SELECT\";\nexport const SINGLE_EVENT_EDIT_UPDATE = \"SINGLE_EVENT_EDIT_UPDATE\";","import { SELECT_DATE_FETCH } from '../Actions/actionTypes';\n\nimport InitialState from './initialState';\n\n/**\n * set data for specific action type\n * @param {*} state \n * @param {*} action \n */\nconst allEvent = (state = InitialState.selectedEvent, action) => {\n    switch(action.type) {\n        default: \n            return state;\n        case SELECT_DATE_FETCH:\n            return Array.isArray(action.payload) ? action.payload: [action.payload] ;\n    }\n}\n\nexport {\n    allEvent\n};","import InitialState from './initialState';\n\nimport { \n    SINGLE_EVENT_FETCH,\n    SINGLE_EVENT_REMOVE,\n    SINGLE_EVENT_EDIT_SELECT,\n    SINGLE_EVENT_EDIT_UPDATE\n} from '../Actions/actionTypes';\n\n/**\n * set state for specific action type\n * @param {*} state \n * @param {*} action \n */\nconst singleEvent = (state = InitialState.singleEvent, action) => {\n    switch(action.type) {\n        default:\n            return state;\n        case SINGLE_EVENT_FETCH:\n            return action.payload;\n        case SINGLE_EVENT_REMOVE:\n            return state;\n        case SINGLE_EVENT_EDIT_SELECT:\n            return action.payload;\n        case SINGLE_EVENT_EDIT_UPDATE:\n            return action.payload[0];\n    }\n}\n\nexport {\n    singleEvent\n}","const selectEvent = (event) => {\n    return {\n        type: 'EVENT_SELECT',\n        payload: event\n    }\n}\n\nexport {\n    selectEvent\n}","import {\n    ADD_DATA,\n    FETCH_DATA\n} from './actionTypes';\n\n/**\n * this method add event\n * on LocalStorage\n * @param {Object} event\n * @return type, payload \n */\nconst addEvent = (event) => {\n    let events = JSON.parse(localStorage.getItem('joom_event')) || [];\n    events.push(event);\n    localStorage.setItem('joom_event', JSON.stringify(events));\n    return {\n        type: ADD_DATA,\n        payload: events\n    }\n}\n\n/**\n * this method fetch all events from \n * localstorage\n * @return type, payload\n */\nconst fetchEvents = () => {\n    const getEvent = JSON.parse(localStorage.getItem('joom_event'));\n    return {\n        type: FETCH_DATA,\n        payload: getEvent\n    }\n}\n\nexport { \n    addEvent,\n    fetchEvents\n}","import {\n    SELECT_DATE_FETCH\n} from './actionTypes';\n\nimport {\n    dateRange,\n    monthDateRange\n} from '../../Helpers/date';\n\n/**\n * this method fetch data \n * by this @param\n * @param {*} start \n * @param {*} end \n * @param {*} view \n * \n * @return type, payload\n */\nconst getEventByDate = (start, end, view) => {\n    let events = JSON.parse(localStorage.getItem('joom_event')) || [];\n    let [limitStart, limitEnd] = view === \"month\" ? monthDateRange(start, end) : dateRange(start, end); \n    let allEvent = events.filter((eve) => {\n        let s = new Date(eve.start).getTime();\n        let e = new Date(eve.end).getTime();\n        console.log(s, e)\n        return s >= limitStart && e <= limitEnd;\n    });\n\n    return {\n        type: SELECT_DATE_FETCH,\n        payload: allEvent\n    }\n}\n\nexport {\n    getEventByDate\n}","import moment from 'moment';\n\nconst monthDateRange = (start, end) => {\n    const startTime = \"00:00:00\";\n    const endTime = \"23:59:59\";\n    let setStart = moment(start).format(\"YYYY-MM-DD\");\n    let setEnd = moment(end).subtract(1, \"days\").format(\"YYYY-MM-DD\");\n    setStart = moment(`${setStart} ${startTime}`).unix();\n    setEnd = moment(`${setEnd} ${endTime}`).unix();\n    return [setStart * 1000, setEnd * 1000];\n}\n\nconst dateRange = (start, end ) => {\n    start = new Date(start).getTime();\n    end = new Date(end).getTime();\n    return [start, end];\n}\n\nexport {\n    dateRange,\n    monthDateRange\n}","import { \n    SINGLE_EVENT_FETCH,\n    SINGLE_EVENT_REMOVE,\n    SINGLE_EVENT_COPY,\n    SINGLE_EVENT_EDIT_SELECT,\n    SINGLE_EVENT_EDIT_UPDATE\n} from './actionTypes';\n\nconst uuid4 = require('uuid/v4');\n\n/**\n * Fetch Single Events\n * @param {} event \n */\nconst fetchSingleEvent = (event) => {\n    let events = JSON.parse(localStorage.getItem('joom_event'));\n    const [ firstEvent ] = events.filter(e => e.id === event.id);\n    return {\n        type: SINGLE_EVENT_FETCH,\n        payload: firstEvent\n    }\n}\n\n/**\n * Copy event\n * @param {} param \n */\nconst copySingleEvent = ({ id, title, start, end, allDay }) => {\n    let events = JSON.parse(localStorage.getItem('joom_event'));\n    events.push({\n        id: uuid4(), title, start, end, allDay\n    })\n    localStorage.setItem('joom_event', JSON.stringify(events));\n\n    return {\n        type: SINGLE_EVENT_COPY,\n        payload: events\n    }\n}\n\n/**\n * Remove single event\n * @param {} param0 \n */\nconst removeSingleEvent = ({ id }) => {\n    const events = JSON.parse(localStorage.getItem('joom_event')).filter((e) => {\n        return e.id !== id;\n    });\n    localStorage.setItem('joom_event', JSON.stringify(events));\n\n    return {\n        type: SINGLE_EVENT_REMOVE,\n        payload: events\n    }\n}\n\n/**\n * Pass single event edit data\n * @param {} event \n */\nconst selectEditEvent = (event) => {\n    return {\n        type: SINGLE_EVENT_EDIT_SELECT,\n        payload: event\n    }\n}\n\n/**\n * Update Edit event\n * @param event \n */\nconst updateEditEvent = (event) => {\n    let events = JSON.parse(localStorage.getItem('joom_event')).filter(e => e.id !== event.id);\n    events.push(event);\n    localStorage.setItem('joom_event', JSON.stringify(events));\n\n    return {\n        type: SINGLE_EVENT_EDIT_UPDATE,\n        payload: [event, events]\n    }\n}\n\n// export methods\nexport {\n    fetchSingleEvent,\n    removeSingleEvent,\n    copySingleEvent,\n    selectEditEvent,\n    updateEditEvent\n}","/**-------------------------------\n * This Component contain using \n * for form event data input\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes  from 'prop-types';\nimport { Form, Input} from 'element-react';\n\nclass EventType extends Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // when work is done refresh the state\n        if (this.props.onClear) {\n            this.setState({ event: \"\" })\n        }\n    }\n\n    state = {\n        event: this.props.event\n    }\n\n    // set description through input event\n    setDescription = (e) => {\n        this.props.addComposeType('event', e)\n        this.setState({ event: e })\n    }\n\n    render() {\n        return (\n            <div>\n                <Form.Item label=\"Description\">\n                    <Input \n                        type=\"textarea\"\n                        autosize={true}\n                        placeholder=\"Description\"\n                        value={this.state.event}\n                        onChange={(e) => {\n                            this.setDescription(e);\n                        }}\n                    />\n                </Form.Item>\n            </div>\n        );\n    }\n}\n\n// EventType Proptypes assignd\nEventType.propTypes = {\n    mode: PropTypes.string.isRequired,\n    event: PropTypes.string,\n    addComposeType: PropTypes.func,\n    onClear: PropTypes.bool\n}\n\n// EventType Default props set here\nEventType.defaultProps = {\n    mode: \"add\",\n    event: \"\"\n}\n\nexport default EventType;","/**-------------------------------\n * This Component contain using \n * for form Meeting data input\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes  from 'prop-types';\nimport { Form, Input} from 'element-react';\n\nclass Meeting extends Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // when work is done refresh the state\n        if (this.props.onClear) {\n            this.setState({ meeting: \"\" })\n        }\n    }\n\n    state = {\n        meeting: this.props.meeting\n    }\n\n    // set description through input event\n    setDescription = (e) => {\n        this.props.addComposeType('meeting', e)\n        this.setState({ meeting: e })\n    }\n\n    render() {\n        return (\n            <div>\n                <Form.Item label=\"Meeting with\">\n                    <Input \n                        placeholder=\"@Hashemi\"\n                        value={this.state.meeting}\n                        onChange={(e) => {\n                            this.setDescription(e);\n                        }}\n                    />\n                </Form.Item>\n            </div>\n        );\n    }\n}\n\n// Meeting Prop types \nMeeting.propTypes = {\n    mode: PropTypes.string.isRequired,\n    meeting: PropTypes.string,\n    addComposeType: PropTypes.func,\n    onClear: PropTypes.bool\n}\n\n// Meeting Default Props\nMeeting.defaultProps = {\n    mode: \"add\",\n    meeting: \"\"\n}\n\nexport default Meeting;","/**-------------------------------\n * This Component contain using \n * for form Reminder data input\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes  from 'prop-types';\nimport { Form, Input} from 'element-react';\n\nclass Reminder extends Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // when work is done refresh the state\n        if (this.props.onClear) {\n            this.setState({ reminder: \"\" });\n        }\n    }\n\n    state = {\n        reminder: this.props.reminder\n    }\n\n    // set description through input event\n    setDescription = (e) => {\n        this.props.addComposeType('reminder', e)\n        this.setState({ reminder: e })\n    }\n\n    render() {\n        return (\n            <div>\n                <Form.Item label=\"Remind for\">\n                    <Input \n                        placeholder=\"example: Today Emon's birthday\"\n                        value={this.state.reminder}\n                        onChange={(e) => {\n                            this.setDescription(e);\n                        }}\n                    />\n                </Form.Item>\n            </div>\n        );\n    }\n}\n\n// Reminder Prop Types\nReminder.propTypes = {\n    mode: PropTypes.string.isRequired,\n    reminder: PropTypes.string,\n    addComposeType: PropTypes.func,\n    onClear: PropTypes.bool\n}\n\n// Reminder Default Props\nReminder.defaultProps = {\n    mode: \"add\",\n    reminder: \"\"\n}\n\nexport default Reminder;","/**-------------------------------\n * This Component contain using \n * for form Tasks data input\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes  from 'prop-types';\nimport { Form, Input} from 'element-react';\n\nclass TaskType extends Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // when work is done refresh the state\n        if (this.props.onClear) {\n            this.setState({ tasks: \"\" })\n        }\n    }\n\n    state = {\n        tasks: this.props.tasks\n    }\n\n    // set description through input event\n    setDescription = (e) => {\n        this.props.addComposeType('tasks', e)\n        this.setState({ tasks: e })\n    }\n\n    render() {\n        return (\n            <div>\n                <Form.Item label=\"Description\">\n                    <Input \n                        type=\"textarea\"\n                        autosize={true}\n                        placeholder=\"Description\"\n                        value={this.state.tasks}\n                        onChange={(e) => {\n                            this.setDescription(e);\n                        }}\n                    />\n                </Form.Item>\n            </div>\n        );\n    }\n}\n\n// Tasks Props types\nTaskType.propTypes = {\n    mode: PropTypes.string.isRequired,\n    tasks: PropTypes.string,\n    addComposeType: PropTypes.func,\n    onClear: PropTypes.bool\n}\n\n// Task Default Props\nTaskType.defaultProps = {\n    mode: \"add\",\n    tasks: \"\"\n}\n\nexport default TaskType;","/**-------------------------------\n * This Component contain using \n * for form event data input\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'element-react';\nimport EventType from './type-component/Event';\nimport MeetingType from './type-component/Meeting';\nimport ReminderType from './type-component/Reminder';\nimport TaskType from './type-component/Tasks';\n\n\nclass TypeEvent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n    }\n\n    state = {\n        type: this.props.type,\n        data: this.props.data\n    }\n\n    // using for sent type and type data to store in immidiate parent\n    sentData = () => {\n        this.props.composedTypeData(this.state.type, this.state.data);\n    }\n\n    // Composing data to state by key and value\n    composeTypeData = (key, value) => {\n        let state = { ...this.state }\n        state.data[key] = value;\n        this.setState({ state });\n        this.sentData();\n    }\n\n    // Logical Rendering for which type and mode is selected\n    showSelectedType = () => {\n        if (this.state.type === \"Event\" && this.props.mode === \"add\") {\n            return (\n                <EventType\n                    mode={this.props.mode}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        } else if (this.state.type === \"Event\" && this.props.mode === \"edit\") {\n            return (\n                <EventType\n                    mode={this.props.mode}\n                    event={this.state.data['event']}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        }\n\n        if (this.state.type === \"Meeting\" && this.props.mode === \"add\") {\n            return(\n                <MeetingType\n                    mode={this.props.mode}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        } else if (this.state.type === \"Meeting\" && this.props.mode === \"edit\") {\n            return(\n                <MeetingType\n                    mode={this.props.mode}\n                    meeting={this.state.data['meeting']}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        }\n\n        if (this.state.type === \"Reminder\" && this.props.mode === \"add\") {\n            return (\n                <ReminderType\n                    mode={this.props.mode}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        } else if (this.state.type === \"Reminder\" && this.props.mode === \"edit\") {\n            return (\n                <ReminderType\n                    mode={this.props.mode}\n                    reminder={this.state.data['reminder']}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            );\n        }\n\n        if (this.state.type === \"Tasks\" && this.props.mode === \"add\") {\n            return(\n                <TaskType\n                    mode={this.props.mode}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            )\n        } else if (this.state.type === \"Tasks\" && this.props.mode === \"edit\") {\n            return(\n                <TaskType\n                    mode={this.props.mode}\n                    tasks={this.state.data['tasks']}\n                    addComposeType={this.composeTypeData}\n                    onClear={this.props.onClear}\n                />\n            )\n        }\n\n    }\n\n    // Radio button for select type and load component\n    eventType = () => {\n        return (\n            <div>\n                <Radio.Group \n                value={this.state.type} \n                onChange={(e) => {\n                    this.setState({ type: e })\n                    this.sentData();\n                }}>\n                    <Radio.Button value=\"Event\" label=\"Event\"/>\n                    <Radio.Button value=\"Meeting\" label=\"Meeting\"/>\n                    <Radio.Button value=\"Reminder\" label=\"Reminder\"/>\n                    <Radio.Button value=\"Tasks\" label=\"tasks\"/>\n                </Radio.Group>\n\n                { this.showSelectedType() }\n            </div>\n        )\n    }\n    // mode wise event show\n    modeWiseEventShow = () => {\n        return this.eventType();\n    }\n\n    render() {\n        return(\n            <div>\n                { this.modeWiseEventShow() }\n            </div>\n        );\n    }\n\n}\n\n// TypeEvent prop types\nTypeEvent.propTypes = {\n    mode: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    composedTypeData: PropTypes.func,\n    data: PropTypes.object,\n    onClear: PropTypes.bool\n}\n\n// TypeEvent default props\nTypeEvent.defaultProps = {\n    mode: \"add\",\n    type: \"Event\",\n    data: {},\n    onClear: false\n}\n\nexport default TypeEvent;","/**-------------------------------\n * This Component using for \n * add event\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Form, \n    Input, \n    Dialog, \n    DateRangePicker, \n    Button,\n    Notification \n} from 'element-react';\nimport moment from 'moment';\nimport TypeEvent from './TypeEvent';\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass AddEvent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        clear: false,\n        form: {\n            title: \"\",\n            start: this.props.start,\n            end: this.props.end,\n            type: \"\",\n            data: null\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // set date in form when props again updated\n        this.setFormDate();\n    }\n\n    /** \n     * When Different Type of data coming from\n     * Child Form '/type-component/' it update\n     * the data in state\n     */\n    eventTypeCompose = (type, data) => {\n        let state = { ...this.state };\n        state.form.type = type;\n        state.form.data = data;\n        this.setState({ state });\n    }\n\n    // set date in form when props again updated\n    setFormDate = () => {\n        const state = { ...this.state };\n        state.form.start = this.props.start;\n        state.form.end = this.props.end;\n        this.setState({ state }); \n    }\n\n    /**\n     * Set Date value modified to use\n     * DateRangePicker Component \n     * Default Value when Component\n     * Initiate\n     */\n    setDateValue = () => {\n        return [\n            new Date(this.state.form.start),\n            new Date(this.state.form.end)\n        ]\n    }\n\n    // change data clear \n    clearToFalse = () => {\n        this.setState({ clear: true });\n\n\n        setTimeout(() => {\n            this.setState({ clear: false });\n        }, 2000);\n    }\n\n    /**\n     * send the data to main\n     * Calender Component to\n     * Store in that state \n     */\n    sentForm = () => {\n        const { title, start, end, type, data } = this.state.form;\n        const id = uuidv4();\n        if (! title && !type) {\n            // Notify if title and types are empty\n            Notification({\n                message: 'Title, Types Required!',\n                type: 'warning'\n            });\n        } else {\n            // send to parent component\n            this.props.onSave(\n                id,\n                title,\n                moment(start).format(\"YYYY-MM-DDThh:mm:ssZ\"),\n                moment(end).format(\"YYYY-MM-DDThh:mm:ssZ\"),\n                false,\n                type,\n                data\n            )\n            \n            // update state\n            const state = { ...this.state };\n            state.form.title = \"\";\n            state.form.data = null;\n            state.form.type = \"\";\n\n            this.setState({ state });\n            \n            // call clear\n            this.clearToFalse();\n        }\n\n    }\n\n    render() {\n        return(\n            <div>\n                <Dialog.Body>\n                    <Form className=\"en-US\" model={this.state.form}>\n                        <Form.Item label=\"Title\">\n                            <Input \n                                value={this.state.form.title}\n                                onChange={\n                                    (e) => {\n                                        let state= { ...this.state }\n                                        state.form.title = e;\n                                        this.setState({ state })\n                                    }\n                                }\n                            />\n                        </Form.Item>\n\n                        <TypeEvent\n                            mode=\"add\"\n                            composedTypeData={this.eventTypeCompose}\n                            onClear={this.state.clear}\n                        />\n\n                        <Form.Item label=\"Duration\">\n                            <DateRangePicker\n                                isShowTime={true}\n                                value={this.setDateValue()}\n                                placeholder=\"Pick a range\"\n                                onChange={date=>{\n                                    const [ start, end ] = date;\n                                    let state= { ...this.state }\n                                    state.form.start = start;\n                                    state.form.end = end;\n                                    this.setState({ state })\n                                }}\n                            />\n\n                        </Form.Item>\n                    </Form>\n                </Dialog.Body>\n                <Dialog.Footer className=\"dialog-footer\">\n\n                    <Button onClick={ () => {\n                        let state= { ...this.state }\n                        state.form.title = \"\";\n                        this.setState({ state });\n                        this.props.onCancel();\n                        this.clearToFalse();\n                    } }>Cancel</Button>\n\n                    <Button \n                        type=\"primary\" \n                        onClick={ () => {\n                            this.sentForm()\n                        } }>Confirm</Button>\n                </Dialog.Footer>\n            </div>\n        );\n    }\n}\n\n// AddEvent Prop Types\nAddEvent.propTypes = {\n    start: PropTypes.string,\n    end: PropTypes.string,\n    onSave: PropTypes.func,\n    onCancel: PropTypes.func\n}\n\nexport default AddEvent;","/**-------------------------------\n * This Component contain a table\n * to display all the events for \n * selected day and go to the full\n * details by view button.\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Dialog, Table, Button } from 'element-react';\nimport { fetchSingleEvent } from '../Store/Actions/_actions';\nclass AllEvents extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n    }\n\n    state = {\n        columns: [\n            {\n                label: \"Title\",\n                prop: \"title\",\n                width: \"150px\"\n            },\n            {\n                label: \"Action\",\n                render: (row, column, index)=>{\n                    return (\n                        <span>\n                            <Button \n                                type=\"info\" \n                                size=\"mini\" \n                                icon=\"view\"\n                                onClick={() => {\n                                    this.props.fetchSingleEvent(row)\n                                    this.props.changeViewMode(true);\n                                }}\n                            >View</Button>\n                        </span>\n                    )\n                }\n            }\n        ]\n    }\n\n    render() {\n        return(\n            <div>\n                <Dialog.Body>\n                <Table\n                    style={{width: '100%'}}\n                    columns={this.state.columns}\n                    data={this.props.events}\n                    border={true}\n                    height={250}\n                />\n                </Dialog.Body>\n            </div>\n        )\n    }\n}\n\n// AllEvent Prop Types\nAllEvents.propTypes = {\n    changeViewMode: PropTypes.func\n}\n\n// map selected event to props\nconst mapStateToProps = (state) => {\n    return {\n        events: state.selectedEvent\n    }\n}\n\n// map fetchSingle event to dispath in props\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        fetchSingleEvent\n    }, dispatch);\n}\n\n\nexport default connect(mapStateToProps, matchDispatchToProps)(AllEvents);","/**-------------------------------\n * This Component contain using \n * for edit specific event\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from \"moment\";\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Form, Button, Dialog, Input, DateRangePicker } from 'element-react';\nimport { \n    updateEditEvent\n} from '../Store/Actions/_actions';\nimport TypeEvent from './TypeEvent';\n\n\nclass EditEvent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props =  props;\n    }\n\n    state = {\n        clear: false,\n        form: {\n            id: this.props.event.id,\n            title: this.props.event.title,\n            start: this.props.event.start,\n            end: this.props.event.end,\n            type: this.props.event.type,\n            data: this.props.event.data\n        }\n    }\n\n    /** \n     * When Different Type of data coming from\n     * Child Form '/type-component/' it update\n     * the data in state\n     */\n    eventTypeCompose = (type, data) => {\n        let state = { ...this.state };\n        state.form.type = type;\n        state.form.data = data;\n        this.setState({ state });\n    }\n\n    // change data clear \n    clearToFalse = () => {\n        this.setState({ clear: true });\n\n\n        setTimeout(() => {\n            this.setState({ clear: false });\n        }, 2000);\n    }\n\n    /**\n     * send the data to main\n     * Calender Component to\n     * Store in that state \n     */\n    sentForm = () => {\n        const { id, title, start, end, type, data } = this.state.form;\n        if (! title && !type) {\n            // Notify if title and types are empty\n            Notification({\n                message: 'Title, Types Required!',\n                type: 'warning'\n            });\n        } else {\n            // send to parent component            \n            this.props.updateEditEvent({\n                id,\n                title,\n                start: moment(start).format(\"YYYY-MM-DDThh:mm:ssZ\"),\n                end:moment(end).format(\"YYYY-MM-DDThh:mm:ssZ\"),\n                allDay: false,\n                type, data\n            })\n            // back to main view\n            this.props.onSave();\n\n            this.clearToFalse();\n\n        }\n\n    }\n\n    /**\n     * Set Date value modified to use\n     * DateRangePicker Component \n     * Default Value when Component\n     * Initiate\n     */\n    setDateValue = () => {\n        return [\n            new Date(this.state.form.start),\n            new Date(this.state.form.end)\n        ]\n    }\n\n    render() {\n        return(\n            <div>\n                <Dialog.Body>\n                    <Form className=\"en-US\" model={this.state.form}>\n                        <Form.Item label=\"Title\">\n                            <Input \n                                value={this.state.form.title}\n                                onChange={\n                                    (e) => {\n                                        let state= { ...this.state }\n                                        state.form.title = e;\n                                        this.setState({ state })\n                                    }\n                                }\n                            />\n                        </Form.Item>\n                        \n                        <TypeEvent\n                            mode=\"edit\"\n                            type={this.state.form.type}\n                            data={this.state.form.data}\n                            composedTypeData={this.eventTypeCompose}\n                            onClear={this.state.clear}\n                        />\n\n                        <Form.Item label=\"Duration\">\n                            <DateRangePicker\n                                isShowTime={true}\n                                value={this.setDateValue()}\n                                placeholder=\"Pick a range\"\n                                onChange={date=>{\n                                    const [ start, end ] = date;\n                                    let state= { ...this.state }\n                                    state.form.start = start;\n                                    state.form.end = end;\n                                    this.setState({ state })\n                                }}\n                            />\n\n                        </Form.Item>\n                    </Form>\n                </Dialog.Body>\n                <Dialog.Footer className=\"dialog-footer\">\n\n                    <Button onClick={ () => {\n                        this.props.onCancel();\n                    } }>Cancel</Button>\n\n                    <Button \n                        type=\"primary\" \n                        onClick={ () => {\n                            this.sentForm()\n                        } }>Confirm</Button>\n                </Dialog.Footer>\n            </div>\n        );\n    }\n}\n\n// map store state\nconst mapStateToProps = (state) => {\n    return {\n        event: state.singleEvent,\n    }\n}\n\n// map store actions\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        updateEditEvent\n    }, dispatch);\n}\n\n// EditEvent Prop Types\nEditEvent.propTypes = {\n    onSave: PropTypes.func,\n    onCancel: PropTypes.func\n}\n\nexport default connect(mapStateToProps, matchDispatchToProps)(EditEvent);","/**-------------------------------\n * This Component contain using\n * for single events details \n * and actions to edit, copy and\n * delete\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Card, Button, Dialog, Notification } from 'element-react';\nimport { \n    selectEditEvent,\n    removeSingleEvent, \n    copySingleEvent \n} from '../Store/Actions/_actions';\nimport EditEvent from './EditEvent';\n\nclass ShowSingleEvent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n    }\n\n    state = {\n        startEdit: this.props.refresh\n    }\n\n    // get event from singleEvent or AllEvent\n    getEvent = () => {\n        return this.props.event || this.props.evento;\n    }\n\n    // return in view\n    onCancel = () => {\n        this.setState({ startEdit: false });\n    }\n\n    // when update event to show success notifiction\n    onEditSave = () => {\n        this.setState({ startEdit: false });\n\n        Notification({\n            message: 'Event Updated!',\n            type: 'success'\n        });\n    }\n\n    // Event Show method\n    eventShow = (event) => {\n        return(\n            <Dialog.Body>\n                <Card\n                    className=\"box-card\"\n                    header={\n                        <div className=\"clearfix\">\n                        <span style={{ \"lineHeight\": \"24px\" }}>\n                            { event.title }\n                        </span>\n                        <span style={{ \"float\": \"right\" }}>\n                            <Button \n                                type=\"info\" \n                                size=\"small\" \n                                icon=\"edit\"\n                                onClick={() => {\n                                    this.props.selectEditEvent(event);\n                                    this.setState({ startEdit: true });\n                                    // this.props.onStartEdit(true);\n                                }}\n                            >Edit</Button>\n\n                            <Button \n                                type=\"warning\" \n                                size=\"small\" \n                                icon=\"document\"\n                                onClick={() => {\n                                    this.props.copySingleEvent(event);\n                                    this.props.onCopy();\n                                }}\n                            >Copy</Button>\n\n                            <Button \n                                type=\"danger\" \n                                size=\"small\" \n                                icon=\"delete2\"\n                                onClick={() => {\n                                    this.props.removeSingleEvent(event);\n                                    this.props.onSuccess();\n                                }}\n                            >Remove</Button>\n                        </span>\n                        </div>\n                    }\n                >\n                    <div className=\"text item\">\n                        Start : { event.start }\n                    </div>\n\n                    <div className=\"text item\">\n                        End : { event.end }\n                    </div>\n\n                </Card>\n            </Dialog.Body>\n        )\n    }\n\n    // event edit method\n    eventEdit = (event) => {\n        return(\n            <EditEvent\n                onSave={this.onEditSave}\n                onCancel={this.onCancel}\n            />\n        )\n    }\n\n    // Logical renderning for showing show or edit component\n    eventShowOrEdit = (event) => {\n        if (!this.state.startEdit) {\n            return this.eventShow(event);\n        } else {\n            return this.eventEdit(event);\n        }\n    }\n\n    render() {\n        const event = this.getEvent();\n        \n        return(\n            <div>\n                { this.eventShowOrEdit(event) }\n            </div>\n        );\n    }\n}\n\n// ShowSingleEvent Prop types\nShowSingleEvent.propTypes = {\n    evento: PropTypes.object,\n    onSuccess: PropTypes.func,\n    onCopy: PropTypes.func,\n    onStartEdit: PropTypes.func,\n    refresh: PropTypes.bool\n}\n\n// map store state\nconst mapStateToProps = (state) => {\n    return {\n        event: state.singleEvent,\n    }\n}\n\n// map store actions\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectEditEvent,\n        copySingleEvent,\n        removeSingleEvent\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, matchDispatchToProps)(ShowSingleEvent);","/**-------------------------------\n * This Component contain using \n * for showing all Event and \n * adding new data form\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AllEvents from './AllEvents';\nimport AddEvent from './AddEvent';\nimport { Tabs, Notification, Button } from 'element-react';\nimport ShowSingleEvent from './ShowSingleEvent';\n\nclass ShowEvents extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n    }\n\n    state = {\n        modeEdit: this.props.showEventMode\n    }\n\n    // Show tabs\n    showTabs = () => {\n        return (\n            <Tabs activeName=\"2\">\n                <Tabs.Pane label=\"View Events\" name=\"1\">\n                    {/* AllEvent Componet */}\n                    <AllEvents\n                        changeViewMode={this.changeViewMode}\n                    />\n                </Tabs.Pane>\n                <Tabs.Pane label=\"Add Events\" name=\"2\">\n                    {/* AddEvent Component */}\n                    <AddEvent\n                        start={this.props.eventStart}\n                        end={this.props.eventEnd}\n                        onSave={this.props.eventOnSave}\n                        onCancel={this.props.eventOnCancel}\n                    />\n                </Tabs.Pane>\n            </Tabs>\n\n        )\n    }\n\n    // Change View Mode\n    changeViewMode = (mode) => {\n        this.setState({ modeEdit: mode });\n    }\n\n    // Refresh events when update and notify\n    removeSuccessMessage = () => {\n        this.props.refreshEvents();\n        this.changeViewMode(false)\n        Notification({\n            message: 'Event Removed!',\n            type: 'success'\n        });\n\n    }\n\n    // Logical Rendering\n    showTabOrView = () => {\n        if (!this.state.modeEdit) {\n            return this.showTabs();\n        } else {\n            return(\n                <div>\n                    <Button icon=\"arrow-left\" type=\"primary\" size=\"mini\" onClick={() => {\n                        this.setState({ modeEdit: false })\n                    }}>Back</Button>\n                    <ShowSingleEvent\n                        onSuccess={this.removeSuccessMessage}\n                        onCopy={this.props.onCopy}\n                        refresh={this.props.showEventMode}\n                    />\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                { this.showTabOrView() }\n            </div>\n        );\n    }\n}\n\n// ShowEvents prop types \nShowEvents.propTypes = {\n    eventStart: PropTypes.string,\n    eventEnd: PropTypes.string,\n    eventOnSave: PropTypes.func,\n    eventOnCancel: PropTypes.func,\n    refreshEvents: PropTypes.func,\n    showEventMode: PropTypes.bool\n}\n\nexport default ShowEvents;","/**-------------------------------\n * This Component\n * showing the event data\n * by color code and counting \n * how much event are stored \n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types' ;\nimport { Layout } from 'element-react';\n\nclass ColorCounter extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n    }\n\n    /**\n     * setEventCount\n     * this method count \n     * the past and upcoming \n     * event from props\n     */\n    setEventCount = () => {\n        const { event } = this.props;\n        let past = 0, upcoming = 0;\n        if (event.length) {\n            event.forEach((eves) => {\n                if (new Date(eves.end).getTime() < new Date().getTime()) {\n                    past++;\n                } else {\n                    upcoming++;\n                }\n            })\n        }\n\n        return [past, upcoming];\n    }\n\n    render() {\n        const [past, upcoming] = this.setEventCount();\n        return (\n            <div>\n                <Layout.Row gutter=\"20\">\n                    <Layout.Col span=\"1\" offset=\"17\">\n                        <div className=\"past\">\n                            <span>{ past }</span>\n                        </div>\n                    </Layout.Col>\n                    <Layout.Col span=\"1\">\n                        <div className=\"upcoming\">\n                            <span>{ upcoming }</span>\n                        </div>\n                    </Layout.Col>\n                </Layout.Row>\n            </div>\n        )\n    }\n}\n\n// ColorCounter Prop Types\nColorCounter.propTypes = {\n    event: PropTypes.any\n}\n\n// ColorCounter Default Props\nColorCounter.defaultProps = {\n    event: []\n}\n\nexport default ColorCounter;","/**-------------------------------\n * This Component contain the main\n * calender layout and Calender \n * layout actually provided by \n * FullCalender.io. This component\n * is main parent component for \n * calender module.\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport './css/calender.css';\nimport { Dialog, Notification } from 'element-react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\nimport FabButton from '@material-ui/core/Button'\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { selectEvent } from '../Store/Actions/action-events';\nimport { \n    fetchEvents, \n    addEvent, \n    getEventByDate,\n    fetchSingleEvent\n} from '../Store/Actions/_actions';\nimport AddEvent from './AddEvent';\nimport moment from 'moment';\nimport ShowEvents from './ShowEvents';\nimport ShowSingleEvent from './ShowSingleEvent';\nimport ColorCounter from './ColorCounter';\n\nconst $ = window.$;\nconst timezone = \"+06:00\";\nconst styles = theme => ({\n    fab: {\n      position: 'absolute',\n      bottom: theme.spacing.unit * 2,\n      right: theme.spacing.unit * 2,\n    }\n});\n\nclass Calender extends Component {\n    constructor(props) {\n        super(props);\n        // Fetch Events from localStorage\n        this.props.fetchEvents();\n    }\n\n    state = {\n        dialogVisible: false,\n        addNewDialogVisible: false,\n        eventDialogVisible: false,\n        singleEventDialogVisible: false,\n        startDate: String(new Date()),\n        endDate: String(new Date()),\n        start: null,\n        end: null,\n        view: $('#calender').fullCalendar('getView').name,\n        eventso: this.props.events,\n        singleEventRefresh: false,\n        showEventMode: false\n    }\n\n    componentWillReceiveProps(props) {\n        this.props = props;\n        // Update calender UI when Store change something\n        $(\"#calender\").fullCalendar('removeEvents'); \n        // Set Event store source when data updated\n        $(\"#calender\").fullCalendar('addEventSource', this.props.events);\n        \n    }\n\n    /**\n     * Initial Calender UI\n     * If this.props.events has\n     * event data\n     */\n    initCalender = () => {\n        const { events } = this.props;\n        if (events) {\n            // Initial Full Calender\n            $('#calender').fullCalendar({\n                header: {\n                    left: 'title',\n                    center: 'agendaDay,agendaWeek,month',\n                    right: 'prev,next today'\n                },\n                firstDay: 1,\n                selectable: true,\n                defaultView: 'month',\n                axisFormat: 'h:mm',\n                allDaySlot: false,\n                selectHelper: true,\n                eventLimit: true,\n                editable: true,\n                droppable: false, // this allows things to be dropped onto the calendar\n                select: (start, end, allDay) => {\n                    // Which view type is assigned [day, week, month]\n                    let view = $('#calender').fullCalendar('getView');  \n                    // Open Modal When each date selected      \n                    this.openModal(start, end ,view.name);\n                },\n                eventClick: (event) => {\n                    // Fetch each single event when it click\n                    this.props.fetchSingleEvent(event);\n                    // Open single event model\n                    this.singleEventModalOpen();\n                },\n                eventRender: (event, element) => {\n                    // Showing event past or present by color code ['red', 'green];\n                    const eves = JSON.parse(localStorage.getItem('joom_event')).filter((i) => i.id === event.id);\n                    const [ item ] = eves;\n                    if (new Date(item.end).getTime() < new Date().getTime()) {\n                        element.css('background-color', '#ff6d6d');\n                    } else {\n                        element.css('background-color', '#13ce66');\n                    }\n                },\n                // Events data source\n                events\n            })\n        }\n    }\n\n    /**\n     * Change Select state for\n     * get Data by starting and \n     * ending date and view wise\n     */\n    changeSelectState = () => {\n        const { start, end, view } = this.state;\n        // Fetch event by start date, end date and view name\n        this.props.getEventByDate(start, end, view);\n    }\n\n    /**\n     * Open Modal\n     * this method working for \n     * set some state and\n     * get data by start and end date and view name\n     */\n    openModal = (start, end, view) => {\n        this.setState({ \n            dialogVisible: true,\n            start,\n            end,\n            view,\n            startDate: String(moment(start).zone(timezone)),\n            endDate: view === \"month\" ? String(moment(end).subtract(1, \"days\").zone(timezone)) : String(moment(end).zone(timezone))\n        })\n\n        // Fetch event by start date, end date and view name        \n        this.props.getEventByDate(start, end, view);\n    }\n\n    /**\n     * saveEventByForm\n     * this method Working for\n     * add Event by specific data\n     * close Add event modal\n     * and show notification when \n     * event added\n     */\n    saveEventByForm = (id, title, start, end, allDay, type, data) => {\n        // Add Event \n        this.props.addEvent({\n            id,\n            title,\n            start,\n            end,\n            allDay,\n            type,\n            data\n        })\n        \n        // Add Event modal close\n        this.addEventModalClose();\n\n        // Showing notification when event added\n        Notification({\n            message: 'Event Added!',\n            type: 'success'\n        });\n    }\n\n    /**\n     * addEventModalClose\n     * this method working for\n     * close Add Event modal close\n     */\n    addEventModalClose = () => {\n        this.setState({ addNewDialogVisible: false });\n    }\n\n    /**\n     * addEventModal\n     * this method working for\n     * Showing a modal/Dialog\n     * Contain AddEvent Component\n     * For Adding Event\n     */\n    addEventModal = () => {\n        return (\n            <Dialog\n                title=\"Add Event\"\n                size=\"tiny\"\n                visible={ this.state.addNewDialogVisible }\n                onCancel={ () => this.setState({ addNewDialogVisible: false }) }\n                lockScroll={ false }\n            >   \n                {/* Add Event Component */}\n                <AddEvent\n                    start={this.state.startDate}\n                    end={this.state.endDate}\n                    onSave={this.saveEventByForm}\n                    onCancel={this.addEventModalClose}\n                />\n            </Dialog>\n        )\n    }\n\n    /**\n     * eventModal\n     * This method working for\n     * showing a modal/dialog\n     * contain Show event component\n     * to show all event and \n     * add event component for \n     * specific date\n     */\n    eventModal = () => {\n        return (\n            <Dialog\n                title=\"All Events\"\n                size=\"tiny\"\n                visible={ this.state.dialogVisible }\n                onCancel={ () => {this.setState({ dialogVisible: false, showEventMode:  false })} }\n                lockScroll={ false }\n            >\n                {/* ShowEvent Component  */}\n                <ShowEvents\n                    eventStart={this.state.startDate}\n                    eventEnd={this.state.endDate}\n                    eventOnSave={this.saveEventByForm}\n                    eventOnCancel={() => this.setState({ dialogVisible: false })}\n                    onCopy={this.singleEventCopy}\n                    refreshEvents={this.changeSelectState}\n                    showEventMode={this.state.showEventMode}\n                />\n            </Dialog>\n        )\n    }\n\n    /**\n     * singleEventModal\n     * This method working for\n     * showing a modal/dialog\n     * contain ShowSingle component\n     * to show specific event \n     */\n    singleEventModal = () => {\n        return (\n            <Dialog\n                title=\"Single Event\"\n                size=\"tiny\"\n                visible={ this.state.singleEventDialogVisible }\n                onClose={() => this.setState({ singleEventDialogVisible: false, singleEventRefresh: false })}\n                onCancel={ () => {\n                    this.setState({ singleEventDialogVisible: false, singleEventRefresh: false })\n                } }\n                lockScroll={ false }\n            >  \n                {/* ShowSingleEvent Component */}\n                <ShowSingleEvent\n                    onSuccess={this.singleEventRemoveSuccess}\n                    onCopy={this.singleEventCopy}\n                    onCancel={() => this.setState({ singleEventDialogVisible: false })}\n                    refresh={this.state.singleEventRefresh}\n                />\n            </Dialog>\n        )\n    }\n\n    // SingleEvent Modal Open\n    singleEventModalOpen = () => {\n        this.setState({ singleEventDialogVisible: true })\n    }\n\n    /**\n     * singleEventRemoveSuccess\n     * this method only working when \n     * Some event removed and need \n     * to show notification and close\n     * the singleEvent Modal\n     */\n    singleEventRemoveSuccess = () => {  \n        this.changeSelectState();\n\n        this.setState({ singleEventDialogVisible: false });\n\n        Notification({\n            message: 'Event Removed!',\n            type: 'success'\n        });\n    }\n\n    /**\n     * singleEventCopy\n     * this method only working when \n     * Some event copied and need \n     * to show notification\n     */\n    singleEventCopy = () => {\n        this.changeSelectState();\n\n        Notification({\n            message: 'Event Copied!',\n            type: 'success'\n        });\n    }\n\n    // Open AddNewEvent Modal\n    addNewEventModalOpen = () => {\n        this.setState( { \n            addNewDialogVisible: true,\n        } );\n    }\n\n    componentDidMount() {\n        // Init Calender UI when Compoenent Mounted\n        this.initCalender();\n    }\n\n    render() {\n        const { classes, events } = this.props;\n        const fabs = {\n            color: 'primary',\n            className: classes.fab,\n            icon: <AddIcon />,\n        };\n        return(\n            <div>\n                <ColorCounter\n                    event={events}\n                />\n                <div id=\"calender\"></div>\n                \n            { this.eventModal() }\n            { this.addEventModal() }\n            { this.singleEventModal() }\n\n            <FabButton\n                onClick={ () => ( this.addNewEventModalOpen() ) }\n                variant=\"fab\" className={fabs.className} color={fabs.color}>\n                {fabs.icon}\n            </FabButton>\n            </div>\n        );\n    }\n}\n\n// map store state\nconst mapStateToProps = (state) => {\n    return {\n        events: state.events,\n    }\n}\n\n// map store actions\nconst matchDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectEvent,\n        fetchEvents,\n        addEvent,\n        getEventByDate,\n        fetchSingleEvent\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, matchDispatchToProps)(withStyles(styles, { withTheme: true })(Calender));","/**------------------------------\n * This Component contain the main\n * layout and Calender Component \n * to display event on there.\n---------------------------------*/\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Calender from './Calender';\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  appFrame: {\n    height: '100vh',\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n  },\n  appBar: {\n    position: 'absolute',\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  'appBarShift-left': {\n    marginLeft: drawerWidth,\n  },\n  'appBarShift-right': {\n    marginRight: drawerWidth,\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawerPaper: {\n    position: 'relative',\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  'content-left': {\n    marginLeft: -drawerWidth,\n  },\n  'content-right': {\n    marginRight: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  'contentShift-left': {\n    marginLeft: 0,\n  },\n  'contentShift-right': {\n    marginRight: 0,\n  },\n});\n\nclass PersistentDrawer extends Component {\n    state = {\n      open: false,\n      anchor: 'left',\n    };\n\n    handleDrawerOpen = () => {\n      this.setState({ open: true });\n    };\n\n    handleDrawerClose = () => {\n      this.setState({ open: false });\n    };\n\n    handleChangeAnchor = event => {\n      this.setState({\n        anchor: event.target.value,\n      });\n    };\n\n    render() {\n      const { classes, theme } = this.props;\n      const { anchor, open } = this.state;\n\n      const drawer = (\n        <Drawer\n          variant=\"persistent\"\n          anchor={anchor}\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          {/* <List>{mailFolderListItems}</List> */}\n          <Divider />\n          {/* <List>{otherMailFolderListItems}</List> */}\n        </Drawer>\n      );\n\n      let before = null;\n      let after = null;\n\n      if (anchor === 'left') {\n        before = drawer;\n      } else {\n        after = drawer;\n      }\n\n      return (\n        <div className={classes.root}>\n          <div className={classes.appFrame}>\n            <AppBar\n              className={classNames(classes.appBar, {\n                [classes.appBarShift]: open,\n                [classes[`appBarShift-${anchor}`]]: open,\n              })}\n            >\n              <Toolbar disableGutters={!open}>\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"Open drawer\"\n                  onClick={this.handleDrawerOpen}\n                  className={classNames(classes.menuButton, open && classes.hide)}\n                >\n                  {/* <MenuIcon /> */}\n                </IconButton>\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                  Event Calendo\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            {before}\n            <main\n              className={classNames(classes.content, classes[`content-${anchor}`], {\n                [classes.contentShift]: open,\n                [classes[`contentShift-${anchor}`]]: open,\n              })}\n            >\n              <div className={classes.drawerHeader}>\n              </div>\n              {/* Calender Component */}\n              <Calender/>\n              \n            </main>\n            {after}\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(PersistentDrawer);","/**\n * App\n */\nimport React, { Component } from 'react';\nimport RootApp from './components/RootApp';\nimport 'element-theme-default';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* RootApp for calender module */}\n        <RootApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then((registration) => {\n          if (!registration.pushManager) {\n            return;\n          }\n          // pushNotification(registration);\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction updateData(id ,key, update) {\n  let events = JSON.parse(localStorage.getItem('joom_event')) || [];\n  let newEvent = [];\n  events.map((i) => {\n    if (i.id === id) {\n      i[key] = update;\n    }\n    newEvent.push(i);\n  })\n  localStorage.setItem('joom_event', JSON.stringify(newEvent));\n}\n\nfunction eventData() {\n  let events = JSON.parse(localStorage.getItem('joom_event')) || [];\n  let newEvent = []\n  events.map(i => {\n    if ('pre' in i && 'knock' in i) {\n      newEvent.push(i)\n    } else {\n      i.pre = false;\n      i.knock = false;\n      newEvent.push(i)\n    }\n  })\n  localStorage.setItem('joom_event', JSON.stringify(newEvent));\n  return newEvent;\n}\n\n\nfunction pushNotification(registration) {\n  const vapidPublicKey = \"BDQZUzEODaPotGd2ptDnVUdJ4IWIvV5T4UFf-TM9OlGXgKxhoCPfrkENw1vkSuiIh_bsds5Hy2HQhjIAybVnfaU\"\n  const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)\n  registration.pushManager\n  .subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: convertedVapidKey\n  })\n  .then(subscribe => {\n    \n    setInterval(() => {\n      let data = eventData();\n\n      let nw = data.filter(i => {\n        return new Date(i.end).getTime() - 600  >= new Date().getTime() && !i.pre;\n      })\n      let seq = 0;\n      nw.forEach(ev => {\n        let{ title, type, data } = ev;\n        let tit = `${title} ${data[type.toLowerCase()]}`;\n        seq += 5000;\n        setTimeout(() => {\n          registration.showNotification(tit);\n          updateData(ev, 'pre', true);\n        }, seq)\n      })\n    }, 10000);\n  })\n  .catch(err => console.log(err))\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      pushNotification(registration);\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport Reducers from './Store/Reducers/_reducers';\nimport Thunk from 'redux-thunk';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport { i18n } from 'element-react'\nimport locale from 'element-react/src/locale/lang/en'\nimport './index.css';\n\ni18n.use(locale);\n\nconst store = createStore(\n    Reducers,\n    applyMiddleware(Thunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}